
-- Generated by ORDS REST Data Services 18.4.0.r3541002
-- Schema: DL_BORDERCONTROL Date: removed for diff
--

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'DL_BORDERCONTROL',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'dl_bordercontrol',
      p_auto_rest_auth      => FALSE);

  ORDS.DEFINE_MODULE(
      p_module_name    => 'BlacklistService',
      p_base_path      => '/blacklist/',
      p_items_per_page => 0,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/update',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/update',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
  v_JS_Status JSON_OBJECT_T;
  v_SQLCODE   number;
  v_SQLERRM   varchar2(32767);
  v_input  JSON_OBJECT_T;
begin
  v_JS_Status := JSON_OBJECT_T();
  OWA_UTIL.mime_header(''application/json''
                      ,true
                      ,''UTF-8'');
  v_input := JSON_OBJECT_T(:body);
  DL_BLACKLIST.pkg_blacklist_case.update_case$json(pi_json=> v_input , po_return => v_JS_Status );
  htp.prn(v_JS_Status.Stringify());
exception
  when others then
    DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                   ,v_SQLERRM);
    v_JS_Status.put(''code''
                   ,''ERROR'');
    v_JS_Status.put(''message''
                   ,DL_COMMON.PKG_UTIL.ShortErrMsg(v_SQLERRM));
    v_JS_Status.put(''stack''
                   ,v_SQLERRM);
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn(''}'');
end;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/{GUID}',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/{GUID}',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE
    po_case   json_object_t;
    po_return json_object_t;
    l_is_success boolean;
BEGIN


    dl_blacklist.pkg_blacklist_case.get_case$json(pi_case_id => :GUID
                                                 ,po_case    => po_case
                                                 ,po_return  => po_return);
    dl_blacklist.pkg_utils.write_http_headers_json(pi_return => po_return);
    if dl_blacklist.pkg_utils.is_return_success(pi_return => po_return) then
        :body := po_case.stringify();
    else
         :body := po_return.to_blob();
    end if;
end;');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/{GUID}',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE
    po_case   json_object_t;
    po_return json_object_t;
    v_clob    clob;
BEGIN

  --  v_clob := empty_clob();
    dbms_lob.createtemporary(v_clob, true);

    dl_blacklist.pkg_blacklist_case.get_case$json(pi_case_id => :GUID
                                                 ,po_case    => po_case
                                                 ,po_return  => po_return);
    dl_blacklist.pkg_utils.write_http_headers_json(pi_return => po_return);
    if dl_blacklist.pkg_utils.is_return_success(pi_return => po_return) then
       po_case.to_clob(v_clob);
     else
       po_return.to_clob(v_clob);
    end if;
    dl_common.pljson_printer.htp_output_clob(v_clob);
    dbms_lob.freetemporary(v_clob);
exception when others then
    dbms_lob.freetemporary(v_clob);
    raise;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'case/{GUID}',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'case/{GUID}',
      p_method             => 'GET',
      p_name               => 'X-CODE',
      p_bind_variable_name => 'code',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'case/{GUID}',
      p_method             => 'GET',
      p_name               => 'X-DB-TRANSACTION-GUID ',
      p_bind_variable_name => 'transaction_guid',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'case/{GUID}',
      p_method             => 'GET',
      p_name               => 'X-REASONS',
      p_bind_variable_name => 'reasons',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'case/{GUID}',
      p_method             => 'GET',
      p_name               => 'X-SYSTEM',
      p_bind_variable_name => 'sytem',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/{GUID}',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
v_output json_object_t;
begin
 DL_BLACKLIST.pkg_blacklist_case.delete_case(pi_blacklist_case_id=> :GUID, po_return => v_output  );

END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'cases/GetByIdentityId/{GUID}',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'cases/GetByIdentityId/{GUID}',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE
    po_cases json_array_t;
    po_return json_object_t;
 BEGIN
    dl_blacklist.pkg_blacklist_case.get_cases_by_identity$json(pi_identity_id => :GUID
                                                 ,po_cases => po_cases
                                                 ,po_return  => po_return);
    dl_blacklist.pkg_utils.write_http_headers_json(pi_return => po_return);
    if dl_blacklist.pkg_utils.is_return_success(pi_return => po_return) then
         htp.prn(po_cases .Stringify());
    else
         htp.prn(po_return.Stringify());
    end if;
END;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/abis/identity/{ABIS_ID}',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/abis/identity/{ABIS_ID}',
      p_method         => 'GET',
      p_source_type    => 'json/query;type=single',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'SELECT
    i.key_value,
    i.unique_value,
    i.salutation,
    i.surname,
    i.middle_name,
    i.given_name as givenname,
    i.date_of_birth_partial.getFormatData(''YYYY-MM-DD'') AS date_of_birth,
    i.place_of_birth,
    i.country_of_birth,
    i.nationality,
    i.sex,
    i.notice,
    i.profession,
    i.body_height,
    i.body_weight,
    i.body_shape,
    i.hair_color,
    i.hair_characteristic,
    i.face_shape,
    i.eye_color,
    i.skin,
    ----------------------------------------
    NVL((    SELECT  ''true''
             FROM    dl_blacklist.blacklist_case_identities t,
                     dl_blacklist.blacklist_cases c
             WHERE   t.identity = i.key_value
             AND     c.id = t.blacklist_case
             AND     (
                        (c.arrested_warrant_date is null or (c.arrested_warrant_date <= sysdate)) and
                        (c.arrested_warrant_expiry_date is null or (c.arrested_warrant_expiry_date >= sysdate))
                     )
             AND     ROWNUM = 1
       ), ''false'' ) AS ACTIVE_WARRENT
    ----------------------------------------
FROM
    dl_blacklist.identities i
    INNER JOIN dl_blacklist.blacklist_case_identities c ON c.identity = i.key_value
    INNER JOIN dl_blacklist.biometrics b ON b.blacklist_case_id = c.blacklist_case
WHERE
    b.abis_id =:ABIS_ID
    AND ROWNUM = 1');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/identity',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/identity',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
':body');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/identity/{GUID}',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/identity/{GUID}',
      p_method         => 'GET',
      p_source_type    => 'json/query;type=single',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'SELECT
    key_value,
    unique_value,
    salutation,
    surname,
    middle_name,
    given_name as givenname,
    i.date_of_birth_partial.getFormatData(''YYYY-MM-DD'') AS date_of_birth,
    place_of_birth,
    country_of_birth,
    nationality,
    sex,
    notice,
    profession,
    body_height,
    body_weight,
    body_shape,
    hair_color,
    hair_characteristic,
    face_shape,
    eye_color,
    skin,
    ----------------------------------------
    NVL((    SELECT  ''true''
             FROM    dl_blacklist.blacklist_case_identities t,
                     dl_blacklist.blacklist_cases c
             WHERE   t.identity = i.key_value
             AND     c.id = t.blacklist_case
             AND     (
                        (c.arrested_warrant_date is null or (c.arrested_warrant_date <= sysdate)) and
                        (c.arrested_warrant_expiry_date is null or (c.arrested_warrant_expiry_date >= sysdate))
                     )
             AND     ROWNUM = 1
       ), ''false'' ) AS ACTIVE_WARRENT
    ----------------------------------------
FROM
    dl_blacklist.identities i
WHERE
    key_value =:GUID
    AND is_active = ''Y''');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/search/candidates',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/search/candidates',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
  v_JS_Status JSON_OBJECT_T;
  v_Result    clob;
  v_Buffer    varchar2(16384 CHAR);
  v_Offset    integer := 1;
  v_Amount    integer := 16384;
  v_SQLCODE   number;
  v_SQLERRM   varchar2(32767);
begin
  v_JS_Status := JSON_OBJECT_T();
  OWA_UTIL.mime_header(''application/json''
                      ,true
                      ,''UTF-8'');
  v_Result := DL_BLACKLIST.PKG_SEARCH.SearchCandidates$JSON(DL_COMMON.PKG_UTIL.BLOB2CLOB(:body));
  begin
    v_JS_Status.put(''code''
                   ,''SUCCESS'');
    v_JS_Status.put_Null(''message'');
    v_JS_Status.put_Null(''stack'');
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn('',"candidates":'');
    loop
      DBMS_LOB.read(v_Result
                   ,v_Amount
                   ,v_Offset
                   ,v_Buffer);
      v_Offset := v_Offset + v_Amount;
      htp.prn(v_Buffer);
    end loop;
  exception
    when NO_DATA_FOUND then
      htp.prn(''}'');
      DL_COMMON.PKG_UTIL.FreeTempLOB(v_Result);
    when others then
      DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                     ,v_SQLERRM);
      DL_COMMON.PKG_UTIL.FreeTempLOB(v_Result);
      Raise_application_error(v_SQLCODE
                             ,v_SQLERRM);
  end;
exception
  when others then
    DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                   ,v_SQLERRM);
    v_JS_Status.put(''code''
                   ,''ERROR'');
    v_JS_Status.put(''message''
                   ,DL_COMMON.PKG_UTIL.ShortErrMsg(v_SQLERRM));
    v_JS_Status.put(''stack''
                   ,v_SQLERRM);
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn('',"candidates":null'');
    htp.prn(''}'');
end;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/search/candidates1',
      p_priority       => 5,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/search/candidates1',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
  v_JS_Status JSON_OBJECT_T;
  v_Result    clob;
  v_Buffer    varchar2(16384 CHAR);
  v_Offset    integer := 1;
  v_Amount    integer := 16384;
  v_SQLCODE   number;
  v_SQLERRM   varchar2(32767);
begin
  v_JS_Status := JSON_OBJECT_T();
  OWA_UTIL.mime_header(''application/json''
                      ,true
                      ,''UTF-8'');
  v_Result := DL_BLACKLIST.PKG_SEARCH.SearchCandidates$JSON(DL_COMMON.PKG_UTIL.BLOB2CLOB(:body));
  begin
    v_JS_Status.put(''code''
                   ,''SUCCESS'');
    v_JS_Status.put_Null(''message'');
    v_JS_Status.put_Null(''stack'');
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn('',"candidates":'');
    loop
      DBMS_LOB.read(v_Result
                   ,v_Amount
                   ,v_Offset
                   ,v_Buffer);
      v_Offset := v_Offset + v_Amount;
      htp.prn(v_Buffer);
    end loop;
  exception
    when NO_DATA_FOUND then
      htp.prn(''}'');
      DL_COMMON.PKG_UTIL.FreeTempLOB(v_Result);
    when others then
      DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                     ,v_SQLERRM);
      DL_COMMON.PKG_UTIL.FreeTempLOB(v_Result);
      Raise_application_error(v_SQLCODE
                             ,v_SQLERRM);
  end;
exception
  when others then
    DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                   ,v_SQLERRM);
    v_JS_Status.put(''code''
                   ,''ERROR'');
    v_JS_Status.put(''message''
                   ,DL_COMMON.PKG_UTIL.ShortErrMsg(v_SQLERRM));
    v_JS_Status.put(''stack''
                   ,v_SQLERRM);
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn('',"candidates":null'');
    htp.prn(''}'');
end;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/search/simple',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'demographic/search/simple',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
  v_JS_Status JSON_OBJECT_T;
  v_Result    clob;
  v_Buffer    varchar2(16384);
  v_Offset    integer := 1;
  v_Amount    integer := 16384;
  v_SQLCODE   number;
  v_SQLERRM   varchar2(32767);
begin
  v_JS_Status := JSON_OBJECT_T();
  OWA_UTIL.mime_header(''application/json''
                      ,true
                      ,''UTF-8'');
  v_Result := DL_BLACKLIST.PKG_SEARCH.SearchSimple$JSON(DL_COMMON.PKG_UTIL.BLOB2CLOB(:body));
  begin
    v_JS_Status.put(''code''
                   ,''SUCCESS'');
    v_JS_Status.put_Null(''message'');
    v_JS_Status.put_Null(''stack'');
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn('',"candidates":'');
    loop
      DBMS_LOB.read(v_Result
                   ,v_Amount
                   ,v_Offset
                   ,v_Buffer);
      v_Offset := v_Offset + v_Amount;
      htp.prn(v_Buffer);
    end loop;
  exception
    when NO_DATA_FOUND then
      htp.prn(''}'');
      DL_COMMON.PKG_UTIL.FreeTempLOB(v_Result);
    when others then
      DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                     ,v_SQLERRM);
      DL_COMMON.PKG_UTIL.FreeTempLOB(v_Result);
      Raise_application_error(v_SQLCODE
                             ,v_SQLERRM);
  end;
exception
  when others then
    DL_COMMON.PKG_UTIL.FormatErrMsg(v_SQLCODE
                                   ,v_SQLERRM);
    v_JS_Status.put(''code''
                   ,''ERROR'');
    v_JS_Status.put(''message''
                   ,DL_COMMON.PKG_UTIL.ShortErrMsg(v_SQLERRM));
    v_JS_Status.put(''stack''
                   ,v_SQLERRM);
    htp.prn(''{"status":'');
    htp.prn(v_JS_Status.Stringify());
    htp.prn('',"candidates":null'');
    htp.prn(''}'');
end;
');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'images/getFaceImageByIdentity/{GUID}',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'images/getFaceImageByIdentity/{GUID}',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE
    po_biometrics  json_array_t;
    po_return json_object_t  ;
 BEGIN
    dl_blacklist.pkg_blacklist_case.get_faces_by_identity$json(pi_identity_id => :GUID
                                                 ,po_biometrics => po_biometrics
                                                 ,po_return  => po_return);
    dl_blacklist.pkg_utils.write_http_headers_json(pi_return => po_return);
    if dl_blacklist.pkg_utils.is_return_success(pi_return => po_return) then
         htp.prn(po_biometrics.Stringify());
    else
         htp.prn(po_return.Stringify());
    end if;
    --:status := 500 ;
END;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'images/getFaceImageByIdentity/{GUID}',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'nist/tcn',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'nist/tcn',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
    -- Variables to calculate alpha-numeric check character for the tcn number (YY * 10^8 + SSSSSSSS)Modulo23
    l_year          number := to_number(to_char(sysdate, ''YY''));
    l_multiplicant  number := power(10,8);
    l_modulo        number := 23;
    l_check_no      number;
    -- Array Lookup for the tcn check character
    type t_array is varray(23) of varchar2(1);
    l_tcn_lookup    t_array := t_array(''Z'',''A'',''B'',''C'',''D'',''E'',''F'',''G'',''H'',''J'',''K'',''L'',''M'',''N'',''P'',''Q'',''R'',''T'',''U'',''V'',''W'',''X'',''Y'');
    -- tcn number and serial
    l_serial    number(8);
    l_tcn       varchar(11);
    l_rowid     rowid;
    --
    l_bl_case_id    varchar2(32);
    l_user          varchar2(255);
    l_requester     varchar2(255);
    --
    l_values         apex_json.t_values;
    l_source_blob    blob := :body;
    l_source_clob    clob;
    --
    l_dstoff         integer := 1;
    l_srcoff         integer := 1;
    l_lngctx         integer := 0;
    l_warning        integer;

begin

    -- JSON init and load
    begin
    dbms_lob.createtemporary(l_source_clob, true);

    dbms_lob.converttoclob(dest_lob     => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''AL32UTF8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    apex_json.parse(p_values => l_values
                   ,p_source => l_source_clob);

    l_bl_case_id := apex_json.get_varchar2(p_values => l_values, p_path => ''blacklistCaseId'');
    l_user       := apex_json.get_varchar2(p_values => l_values, p_path => ''user'');

    exception when others
    then
        :status := 400;
        :tcn_no := null;
        :response_message := ''Body could not be parsed. Check your json'';
        return;
    end;

    -- Determine User IP-Address
    begin

        if :forwarded_ip is null then
            l_requester := owa_util.get_cgi_env(''REMOTE_ADDR'');
        else l_requester := :forwarded_ip;
        end if;

    exception when others
    then
        :status := 406;
        :tcn_no := null;
        :response_message := ''User or IP could not be determined'';
        return;
    end;

    -- Generate tcn check character
    loop
        begin
            select ceil(dbms_random.value(10000000,99999999))
            into l_serial
            from dual;

            select mod((l_year * l_multiplicant + l_serial), l_modulo)
            into l_check_no
            from dual;

            l_tcn := l_year || l_serial || l_tcn_lookup(l_check_no + 1);

            -- Insert new tcn with blacklist case id into table
            insert into dl_blacklist.nist_tcn
                (bl_case_id
                ,nist_tcn_no
                ,ins_from
                ,ins_at
                ,ins_by)
            values
                (l_bl_case_id
                ,l_tcn
                ,l_user
                ,sysdate
                ,l_requester)
            returning rowid
            into l_rowid;

            exit when l_rowid is not null;

            exception when dup_val_on_index
            then null;
        end;
    end loop;

    :status := 200;
    :tcn_no := l_tcn;
    :response_message := ''tcn number successfully created'';

    exception when others
    then
        :status := 500;
        :tcn_no := null;
        :response_message := sqlerrm;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'nist/tcn',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'nist/tcn',
      p_method             => 'POST',
      p_name               => 'message',
      p_bind_variable_name => 'response_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'nist/tcn',
      p_method             => 'POST',
      p_name               => 'tcnNo',
      p_bind_variable_name => 'tcn_no',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'nist/tcn',
      p_method             => 'POST',
      p_name               => 'x-forwarded-for',
      p_bind_variable_name => 'forwarded_ip',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'blacklistCaseICRS',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'blacklistCaseICRS',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
    l_values         APEX_JSON.T_VALUES;
    l_source_blob    blob := :body;
    l_source_clob    clob;
    --
    l_bl_case_id    varchar2(32);
    l_bl_case_no    varchar2(11);
    l_ext_seq_no    varchar2(70);
    l_requester     varchar2(100);
    l_bl_case_id_count number;
    --
    l_dstoff    integer := 1;
    l_srcoff    integer := 1;
    l_lngctx    integer := 0;
    l_warning   integer;
    --
begin

    -- Init and parse
    begin
        dbms_lob.createtemporary(l_source_clob, true);

        dbms_lob.converttoclob(dest_lob     => l_source_clob
                              ,src_blob     => l_source_blob
                              ,amount       => dbms_lob.lobmaxsize
                              ,dest_offset  => l_dstoff
                              ,src_offset   => l_srcoff
                              ,blob_csid    => nls_charset_id(''AL32UTF8'')
                              ,lang_context => l_lngctx
                              ,warning      => l_warning);
        apex_json.parse(p_values => l_values
                       ,p_source => l_source_clob);

        l_bl_case_id    := apex_json.get_varchar2(p_values => l_values, p_path => ''blacklistCaseId'');
        l_ext_seq_no    := apex_json.get_varchar2(p_values => l_values, p_path => ''seqNo'');

    exception when others
    then
        :status := 400;
        :bl_case_id := l_bl_case_id;
        :seq_no     := l_ext_seq_no;
        :ins_at     := null;
        :crd_at     := null;
        :response_message := ''Body could not be parsed. Check your json'';
        return;
    end;

    -- Determine User IP-Address
    begin

        if :forwarded_ip is null then
            l_requester := owa_util.get_cgi_env(''REMOTE_ADDR'');
        else l_requester := :forwarded_ip;
        end if;

    exception when others
    then
        :status := 406;
        :bl_case_id := l_bl_case_id;
        :seq_no     := l_ext_seq_no;
        :ins_at     := null;
        :crd_at     := null;
        :response_message := ''User or IP could not be determined'';
        return;
    end;

    -- Check if entry already exists
    select count(*)
    into l_bl_case_id_count
    from dl_blacklist.icrs_case_sync
    where ext_seq_no = l_ext_seq_no;

    if l_bl_case_id_count != 0
    then
        :status := 208;
        :bl_case_id := l_bl_case_id;
        :seq_no     := l_ext_seq_no;
        :response_message := ''The provided case already has the status 0'';

        select
            to_char(ins_at ,''YYYY-MM-DD"T"HH24:MI:SS'') as ins_date,
            to_char(dml_at ,''YYYY-MM-DD"T"HH24:MI:SS'') as update_date
        into
            :ins_at,
            :crd_at
        from dl_blacklist.icrs_case_sync
        where ext_seq_no = l_ext_seq_no;

        return;
    end if;

    select case_number
    into   l_bl_case_no
    from dl_blacklist.blacklist_cases
    where id = l_bl_case_id;

    insert into dl_blacklist.icrs_case_sync
        (bl_case_id
        ,bl_case_no
        ,ext_seq_no
        ,request_at
        ,request_by)
    values
        (l_bl_case_id
        ,l_bl_case_no
        ,l_ext_seq_no
        ,sysdate
        ,l_requester);

    commit;

    select
        to_char(ins_at ,''YYYY-MM-DD"T"HH24:MI:SS'') as ins_date,
        to_char(dml_at ,''YYYY-MM-DD"T"HH24:MI:SS'') as update_date
    into
        :ins_at,
        :crd_at
    from dl_blacklist.icrs_case_sync
    where bl_case_id = l_bl_case_id;

    :status := 200;
    :bl_case_id := l_bl_case_id;
    :seq_no     := l_ext_seq_no;
    :response_message := ''Status successfully updated to: 0'';

    exception when others
    then
        :status := 500;
        :bl_case_id := l_bl_case_id;
        :seq_no     := l_ext_seq_no;
        :ins_at     := null;
        :crd_at     := null;
        :response_message := sqlerrm;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'X-FORWARDED-FOR',
      p_bind_variable_name => 'forwarded_ip',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'blacklistCaseId',
      p_bind_variable_name => 'bl_case_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'createdDateTime',
      p_bind_variable_name => 'ins_at',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'message',
      p_bind_variable_name => 'response_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'seqNo',
      p_bind_variable_name => 'seq_no',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'POST',
      p_name               => 'updatedDateTime',
      p_bind_variable_name => 'crd_at',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'blacklistCaseICRS',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
    l_values         APEX_JSON.T_VALUES;
    l_source_blob    blob := :body;
    l_source_clob    clob;
    --
    l_bl_case_id    varchar2(32);
    l_ext_seq_no    varchar2(70);
    l_result_xml    clob;
    l_result_flag   varchar(2);
    l_request_from  varchar2(255);
    l_requester     varchar2(100);
    l_bl_case_id_count number;
    --
    l_dstoff    integer := 1;
    l_srcoff    integer := 1;
    l_lngctx    integer := 0;
    l_warning   integer;
    --
begin

    -- Init and parse
    begin
        dbms_lob.createtemporary(l_source_clob, true);
        dbms_lob.createtemporary(l_result_xml,  true);

        dbms_lob.converttoclob(dest_lob     => l_source_clob
                              ,src_blob     => l_source_blob
                              ,amount       => dbms_lob.lobmaxsize
                              ,dest_offset  => l_dstoff
                              ,src_offset   => l_srcoff
                              ,blob_csid    => nls_charset_id(''AL32UTF8'')
                              ,lang_context => l_lngctx
                              ,warning      => l_warning);
        apex_json.parse(p_values => l_values
                       ,p_source => l_source_clob);

        l_bl_case_id    := apex_json.get_varchar2(p_values => l_values, p_path => ''blacklistCaseId'');
        l_ext_seq_no    := apex_json.get_varchar2(p_values => l_values, p_path => ''seqNo'');
        l_result_xml    := apex_json.get_clob(p_values => l_values, p_path => ''crdResultXml'');
        l_result_flag   := apex_json.get_varchar2(p_values => l_values, p_path => ''crdResultFlag'');
        l_request_from  := apex_json.get_varchar2(p_values => l_values, p_path => ''createdBy'');

    exception when others
    then
        :status := 400;
        :bl_case_id   := l_bl_case_id;
        :seq_no       := l_ext_seq_no;
        :result_xml   := l_result_xml;
        :result_flag  := l_result_flag;
        :request_from := l_request_from;
        :ins_at     := null;
        :crd_at     := null;
        :response_message := ''Body could not be parsed. Check your json'';
        return;
    end;

    -- Determine User IP-Address
    begin

        if :forwarded_ip is null then
            l_requester := owa_util.get_cgi_env(''REMOTE_ADDR'');
        else l_requester := :forwarded_ip;
        end if;

    exception when others
    then
        :status := 406;
        :bl_case_id   := l_bl_case_id;
        :seq_no       := l_ext_seq_no;
        :result_xml   := l_result_xml;
        :result_flag  := l_result_flag;
        :request_from := l_request_from;
        :ins_at     := null;
        :crd_at     := null;
        :response_message := ''User or IP could not be determined'';
        return;
    end;

    -- Check if entry already exists
    select count(*)
    into l_bl_case_id_count
    from dl_blacklist.icrs_case_sync
    where ext_seq_no = l_ext_seq_no;

    if l_bl_case_id_count != 1 or l_bl_case_id_count is null
    then
        :status       := 404;
        :bl_case_id   := l_bl_case_id;
        :seq_no       := l_ext_seq_no;
        :result_xml   := l_result_xml;
        :result_flag  := l_result_flag;
        :request_from := l_request_from;
        :ins_at       := null;
        :crd_at       := null;
        :response_message := ''No case found connected to the provided seqNo'';
        return;
    end if;

    update dl_blacklist.icrs_case_sync
        set status        = 1,
            result_xml    = l_result_xml,
            result_flag   = l_result_flag,
            request_from  = l_request_from
      where ext_seq_no = l_ext_seq_no;

    commit;

    select
        to_char(ins_at ,''YYYY-MM-DD"T"HH24:MI:SS'') as ins_date,
        to_char(dml_at ,''YYYY-MM-DD"T"HH24:MI:SS'') as update_date
    into
        :ins_at,
        :crd_at
    from dl_blacklist.icrs_case_sync
    where ext_seq_no = l_ext_seq_no;

    :status := 200;
        :bl_case_id   := l_bl_case_id;
        :seq_no       := l_ext_seq_no;
        :result_xml   := l_result_xml;
        :result_flag  := l_result_flag;
        :request_from := l_request_from;
    :response_message := ''Status successfully updated to: 1'';

    exception when others
    then
        :status := 500;
        :bl_case_id   := l_bl_case_id;
        :seq_no       := l_ext_seq_no;
        :result_xml   := l_result_xml;
        :result_flag  := l_result_flag;
        :request_from := l_request_from;
        :ins_at       := null;
        :crd_at       := null;
        :response_message := sqlerrm;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'X-FORWARDED-FOR',
      p_bind_variable_name => 'forwarded_ip',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'blacklistCaseId',
      p_bind_variable_name => 'bl_case_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'crdResultFlag',
      p_bind_variable_name => 'result_flag',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'crdResultXml',
      p_bind_variable_name => 'result_xml',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'createdBy',
      p_bind_variable_name => 'request_from',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'createdDateTime',
      p_bind_variable_name => 'ins_at',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'message',
      p_bind_variable_name => 'response_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'seqNo',
      p_bind_variable_name => 'seq_no',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'PUT',
      p_name               => 'updatedDateTime',
      p_bind_variable_name => 'crd_at',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'blacklistCaseICRS',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    l_bl_case_id varchar2(32);
    l_bl_case_no varchar2(100);

begin

    select
        blc.id,
        blc.case_number
    into
        l_bl_case_id,
        l_bl_case_no
    from dl_blacklist.blacklist_cases blc
    left join dl_blacklist.icrs_case_sync ics on blc.id = ics.bl_case_id
    where ics.bl_case_id is null and blc.is_active = ''Y''
    fetch first 1 row only;

    :status := 200;
    :bl_case_id := l_bl_case_id;
    :bl_case_no := l_bl_case_no;
    :response_message := q''[Please confirm the successful receipt of the key with: ''caseStatus'':0 (POST-request) ]'';

    exception
        when no_data_found
        then
            :status := 200;
            :bl_case_id := null;
            :bl_case_no := null;
            :response_message := ''No case that has not been send yet.'';
        when others
        then
            :status := 500;
            :bl_case_id := null;
            :bl_case_no := null;
            :response_message := sqlerrm;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'GET',
      p_name               => 'blacklistCaseId',
      p_bind_variable_name => 'bl_case_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'GET',
      p_name               => 'blacklistCaseNo',
      p_bind_variable_name => 'bl_case_no',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BlacklistService',
      p_pattern            => 'blacklistCaseICRS',
      p_method             => 'GET',
      p_name               => 'message',
      p_bind_variable_name => 'response_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/insert',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BlacklistService',
      p_pattern        => 'case/insert',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE
    v_js_status json_object_t;
    v_sqlcode   NUMBER;
    v_sqlerrm   VARCHAR2(32767);
    v_input     json_object_t;
BEGIN
    v_js_status := json_object_t();
    owa_util.mime_header(''application/json''
                        ,TRUE
                        ,''UTF-8'');
    v_input := json_object_t(:body);
    DL_BLACKLIST.pkg_blacklist_case.insert_case$json(pi_json=> v_input , po_return => v_JS_Status );
    htp.prn(v_JS_Status.Stringify());
EXCEPTION
    WHEN OTHERS THEN
        dl_common.pkg_util.formaterrmsg(v_sqlcode
                                       ,v_sqlerrm);
        v_js_status.put(''code''
                       ,''ERROR'');
        v_js_status.put(''message''
                       ,dl_common.pkg_util.shorterrmsg(v_sqlerrm));
        v_js_status.put(''stack''
                       ,v_sqlerrm);
        htp.prn(''{"status":'');
        htp.prn(v_js_status.stringify());
        htp.prn(''}'');
END;');



COMMIT;

END;


/
timing for: TIMER_REST_EXPORT
Elapsed: 00:00:00.17
