CREATE OR REPLACE EDITIONABLE PACKAGE "DL_MAINTENANCE"."TRIG_MAIN" is

  -- grant select on dba_users to DL_MAINTENANCE
  -- grant select on all_col_comments to DL_MAINTENANCE
  -- grant select on obj$ to DL_MAINTENANCE
  -- grant select on sys.col$ to DL_MAINTENANCE
  -- grant create any trigger to DL_MAINTENANCE
  -- grant select on dl_blacklist.blacklist_case_identities to dl_maintenance;
  -- grant select on dl_blacklist.blacklist_cases to dl_maintenance;
  -- grant select on dl_blacklist.travel_docs to dl_maintenance;
  --user:
  -- grant all on trig_main to public;
  --
  -- create type trig_data is table of varchar2(200) index by binary_integer;
  -- grant all on trig_data to public;

  type t_array is table of varchar2(200); --index by binary_integer;
  type t_link is table of varchar2(200) index by binary_integer;
  function add_audit(p_schema in varchar2, p_table in varchar2) return number;


  procedure trigger(p_schema    in varchar2,
                      p_table     in varchar2,
                      p_rowid     in varchar2,
                      p_operation in varchar2,
                      p_user      in varchar2,
                      p_col_name  in out t_array,
                      p_col_old   in out t_array,
                      p_col_new   in out t_array);
  procedure log(p_message in varchar2, p_data in clob);
  function del_audit(p_schema in varchar2, p_table in varchar2) return number;

  G_TRG_DEL varchar2(4000) := '
    drop trigger %%SCHEMA_NAME%%.ATRG_%%TABLE_NAME%%
  ';

  G_TRG_CREATE varchar2(4000) := '
  create or replace trigger %%SCHEMA_NAME%%.ATRG_%%TABLE_NAME%%
  after insert or update or delete
  on %%SCHEMA_NAME%%.%%TABLE_NAME%%
  for each row
declare
  PRAGMA AUTONOMOUS_TRANSACTION;
  v_mode varchar2(1);
  v_rowid varchar2(18);
  v_colname dl_maintenance.trig_main.t_array;
  v_coldata_old dl_maintenance.trig_main.t_array;
  v_coldata_new dl_maintenance.trig_main.t_array;
begin
  /* Auto-generated by TRIG_TOOLS at %%SYSDATE%% */
  IF DELETING THEN
   v_mode:=''D'';
   v_rowid:=:old.rowid;
END IF;

IF INSERTING THEN
   v_mode:=''I'';
   v_rowid:=:new.rowid;
END IF;

IF UPDATING THEN
   v_mode:=''U'';
   v_rowid:=:old.rowid;
END IF;
%%COLVARS%%
%%BODY%%

commit;
exception when others then
  dl_maintenance.trig_main.log(''Exception in trigger: %%TABLE_NAME%%'',sqlerrm);
  commit;
end;';

end trig_main;
/
