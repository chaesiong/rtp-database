
-- Generated by ORDS REST Data Services 18.4.0.r3541002
-- Schema: DL_BORDERCONTROL Date: removed for diff
--

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'DL_BORDERCONTROL',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'dl_bordercontrol',
      p_auto_rest_auth      => FALSE);

  ORDS.DEFINE_MODULE(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_base_path      => '/dataServices/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'borderdocument',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'borderdocument',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'DECLARE

    l_values         APEX_JSON.T_VALUES;
    l_source_blob    BLOB := :body;
    l_source_clob    CLOB;
    --
    l_response       CLOB;
    l_response_message    VARCHAR2(4000 CHAR);
    l_status         INTEGER := 400;
    --
    l_borderdocument_rec    dl_bordercontrol.borderdocuments%ROWTYPE;
    l_identity              dl_bordercontrol.identities.identity%TYPE;
    --
    l_photo_scan    blob;
    l_photo_chip    blob;
    l_photo_pass    blob;
    --
    l_dstoff         INTEGER := 1;
    l_srcoff         INTEGER := 1;
    l_lngctx         INTEGER := 0;
    l_warning        INTEGER;

BEGIN

    DBMS_LOB.CREATETEMPORARY(l_source_clob, TRUE);

    DBMS_LOB.CONVERTTOCLOB(dest_lob     => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''AL32UTF8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    APEX_JSON.PARSE (P_VALUES => l_values
                    ,P_SOURCE => l_source_clob);

    -- fill borderdocument-object (maybe also use get_borderdocument functionality?)
    l_borderdocument_rec.doctype              := apex_json.get_varchar2(p_values => l_values, p_path => ''documentType'');
    l_borderdocument_rec.docno                := apex_json.get_varchar2(p_values => l_values, p_path => ''passportNumber'');
    l_borderdocument_rec.issuectry            := apex_json.get_varchar2(p_values => l_values, p_path => ''issuingCountry'');
    l_borderdocument_rec.nat                  := apex_json.get_varchar2(p_values => l_values, p_path => ''nationality'');
    l_borderdocument_rec.dob                  := apex_json.get_varchar2(p_values => l_values, p_path => ''dateOfBirth'');
    l_borderdocument_rec.expirydate           := apex_json.get_date(p_values => l_values, p_path => ''expiryDate'');
    l_borderdocument_rec.givenname            := apex_json.get_varchar2(p_values => l_values, p_path => ''givenname'');
    l_borderdocument_rec.surname              := apex_json.get_varchar2(p_values => l_values, p_path => ''surname'');
    l_borderdocument_rec.middlename           := apex_json.get_varchar2(p_values => l_values, p_path => ''middlename'');
    l_borderdocument_rec.optionaldata         := apex_json.get_varchar2(p_values => l_values, p_path => ''optionalData'');
    l_borderdocument_rec.afisid               := apex_json.get_varchar2(p_values => l_values, p_path => ''abisId'');
    l_borderdocument_rec.ins_terminal         := apex_json.get_varchar2(p_values => l_values, p_path => ''terminal'');
    l_borderdocument_rec.ins_borderpost       := apex_json.get_varchar2(p_values => l_values, p_path => ''borderpost'');
    l_borderdocument_rec.mrzdg1               := apex_json.get_varchar2(p_values => l_values, p_path => ''mrz'');
    l_borderdocument_rec.givenname_thai       := apex_json.get_varchar2(p_values => l_values, p_path => ''givennameThai'');
    l_borderdocument_rec.middlename_thai      := apex_json.get_varchar2(p_values => l_values, p_path => ''middlenameThai'');
    l_borderdocument_rec.surname_thai         := apex_json.get_varchar2(p_values => l_values, p_path => ''surnameThai'');
    l_borderdocument_rec.manual_expiry_date   := apex_json.get_date(p_values => l_values, p_path => ''manualExpiryDate'');
    l_borderdocument_rec.manual_issuing_date  := apex_json.get_date(p_values => l_values, p_path => ''manualIssuingDate'');
    l_borderdocument_rec.manual_nationality   := apex_json.get_varchar2(p_values => l_values, p_path => ''manualNationality'');
    l_borderdocument_rec.manual_placeofbirth  := apex_json.get_varchar2(p_values => l_values, p_path => ''manualPlaceOfBirth'');
    l_borderdocument_rec.sex                  := apex_json.get_varchar2(p_values => l_values, p_path => ''gender'');
    l_borderdocument_rec.docclass             := apex_json.get_varchar2(p_values => l_values, p_path => ''documentClass'');
    l_borderdocument_rec.sub_nationality      := apex_json.get_varchar2(p_values => l_values, p_path => ''subNationalities'');
    l_borderdocument_rec.source_system        := apex_json.get_number(p_values => l_values, p_path => ''sourceSystem'');
    l_photo_scan                              := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''photoScan''));
    l_photo_chip                              := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''photoChip''));
    l_photo_pass                              := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''photoPass''));

    -- check if mandatory fields exist
    IF l_borderdocument_rec.doctype         IS NULL OR
       l_borderdocument_rec.docno           IS NULL OR
       l_borderdocument_rec.issuectry       IS NULL OR
       l_borderdocument_rec.nat             IS NULL OR
       l_borderdocument_rec.dob             IS NULL OR
       l_borderdocument_rec.expirydate      IS NULL OR
       l_borderdocument_rec.surname         IS NULL OR
       l_borderdocument_rec.ins_terminal    IS NULL OR
       l_borderdocument_rec.ins_borderpost  IS NULL OR
       l_borderdocument_rec.sex             IS NULL
    THEN

      l_status := 405;
      l_response_message := '''';

      CASE WHEN l_borderdocument_rec.doctype        IS NULL THEN l_response_message := l_response_message || ''; documentType must not be empty'';    ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.docno          IS NULL THEN l_response_message := l_response_message || ''; passportNumber must not be empty'';  ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.issuectry      IS NULL THEN l_response_message := l_response_message || ''; issuingCountry must not be empty'';  ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.nat            IS NULL THEN l_response_message := l_response_message || ''; nationality must not be empty'';     ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.dob            IS NULL THEN l_response_message := l_response_message || ''; dateOfBirth must not be empty'';     ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.expirydate     IS NULL THEN l_response_message := l_response_message || ''; expiryDate must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.surname        IS NULL THEN l_response_message := l_response_message || ''; surname must not be empty'';         ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.ins_terminal   IS NULL THEN l_response_message := l_response_message || ''; terminal must not be empty'';        ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.ins_borderpost IS NULL THEN l_response_message := l_response_message || ''; borderpost must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.sex            IS NULL THEN l_response_message := l_response_message || ''; gender must not be empty'';          ELSE NULL; END CASE;

    ELSE

        -- check if borderdocument already exists
        l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.get_document (p_docno      => l_borderdocument_rec.docno
                                                                                           ,p_issuectry  => l_borderdocument_rec.issuectry
                                                                                           ,p_expirydate => l_borderdocument_rec.expirydate);

        IF l_borderdocument_rec.brddocid IS NULL
        THEN
            l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.create_document(l_borderdocument_rec.docno
                                                                                                 ,l_borderdocument_rec.doctype
                                                                                                 ,l_borderdocument_rec.issuectry
                                                                                                 ,l_borderdocument_rec.expirydate
                                                                                                 ,l_borderdocument_rec.surname
                                                                                                 ,l_borderdocument_rec.middlename
                                                                                                 ,l_borderdocument_rec.givenname
                                                                                                 ,l_borderdocument_rec.sex
                                                                                                 ,l_borderdocument_rec.dob
                                                                                                 ,l_borderdocument_rec.mrzdg1
                                                                                                 ,l_borderdocument_rec.ins_terminal
                                                                                                 ,l_borderdocument_rec.ins_borderpost
                                                                                                 ,l_photo_scan
                                                                                                 ,l_photo_chip
                                                                                                 ,l_photo_pass
                                                                                                 ,null
                                                                                                 ,null
                                                                                                 ,null
                                                                                                 ,null
                                                                                                 ,l_borderdocument_rec.manual_expiry_date
                                                                                                 ,l_borderdocument_rec.manual_issuing_date
                                                                                                 ,l_borderdocument_rec.manual_nationality
                                                                                                 ,l_borderdocument_rec.manual_placeofbirth
                                                                                                 ,l_borderdocument_rec.docclass
                                                                                                 ,l_identity);

            update dl_bordercontrol.borderdocuments
            set nat             = l_borderdocument_rec.nat
               ,optionaldata    = l_borderdocument_rec.optionaldata
               ,afisid          = l_borderdocument_rec.afisid
               ,givenname_thai  = l_borderdocument_rec.givenname_thai
               ,middlename_thai = l_borderdocument_rec.middlename_thai
               ,surname_thai    = l_borderdocument_rec.surname_thai
               ,sub_nationality = l_borderdocument_rec.sub_nationality
               ,source_system   = l_borderdocument_rec.source_system
            where brddocid = l_borderdocument_rec.brddocid;

        END IF;
    END IF;

    IF l_borderdocument_rec.brddocid IS NOT NULL
    THEN
      l_status := 201;
      l_response_message := ''The borderdocument was successfully created.'';
    END IF;

    :response_status_code := l_status;
    :response_status_message := l_response_message;
    :response_pk := l_borderdocument_rec.brddocid;

    :response := l_response;
    :status := l_status;

EXCEPTION
    WHEN OTHERS
    THEN
        :response_status_code    := l_status;
        :response_status_message := SQLERRM;
        --
        :status := l_status;
        :response := l_response;
END;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'responsePk',
      p_bind_variable_name => 'response_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'responseStatusCode',
      p_bind_variable_name => 'response_status_code',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'responseStatusMessage',
      p_bind_variable_name => 'response_status_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'collectivePassport',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'collectivePassport',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
    l_values         APEX_JSON.T_VALUES;
    l_source_blob    BLOB := :body;
    l_source_clob    CLOB;
    --
    l_response       CLOB;
    l_response_message    VARCHAR2(4000 CHAR);
    l_status         INTEGER := 400;
    --
    l_fellow_passenger_rec    dl_bordercontrol.fellow_passenger%ROWTYPE;
    --
    l_dstoff         INTEGER := 1;
    l_srcoff         INTEGER := 1;
    l_lngctx         INTEGER := 0;
    l_warning        INTEGER;
    --
begin

    dbms_lob.createtemporary(l_source_clob, true);

    dbms_lob.converttoclob(dest_lob     => l_source_clob
                            ,src_blob     => l_source_blob
                            ,amount       => dbms_lob.lobmaxsize
                            ,dest_offset  => l_dstoff
                            ,src_offset   => l_srcoff
                            ,blob_csid    => nls_charset_id(''al32utf8'')
                            ,lang_context => l_lngctx
                            ,warning      => l_warning);

    apex_json.parse (p_values => l_values
                    ,p_source => l_source_clob);

    -- fill fellow passenger-object
    l_fellow_passenger_rec.relation        := apex_json.get_varchar2(p_values => l_values, p_path => ''relationId'');
    l_fellow_passenger_rec.nationality     := apex_json.get_varchar2(p_values => l_values, p_path => ''nationality'');
    l_fellow_passenger_rec.receipt         := apex_json.get_varchar2(p_values => l_values, p_path => ''receipt'');
    l_fellow_passenger_rec.tm6_no          := apex_json.get_varchar2(p_values => l_values, p_path => ''tm6No'');
    l_fellow_passenger_rec.first_name      := apex_json.get_varchar2(p_values => l_values, p_path => ''firstName'');
    l_fellow_passenger_rec.middle_name     := apex_json.get_varchar2(p_values => l_values, p_path => ''middleName'');
    l_fellow_passenger_rec.last_name       := apex_json.get_varchar2(p_values => l_values, p_path => ''lastName'');
    l_fellow_passenger_rec.sex             := apex_json.get_varchar2(p_values => l_values, p_path => ''sex'');
    l_fellow_passenger_rec.date_of_birth   := apex_json.get_date(p_values => l_values, p_path => ''dateOfBirth'');
    l_fellow_passenger_rec.place_of_birth  := apex_json.get_varchar2(p_values => l_values, p_path => ''placeOfBirth'');
    l_fellow_passenger_rec.reason          := apex_json.get_varchar2(p_values => l_values, p_path => ''reason'');
    l_fellow_passenger_rec.approval_status := apex_json.get_varchar2(p_values => l_values, p_path => ''approvalStatus'');
    l_fellow_passenger_rec.image           := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''faceImage''));
    l_fellow_passenger_rec.mvmntid         := apex_json.get_varchar2(p_values => l_values, p_path => ''movementId'');

    insert into dl_bordercontrol.person(first_name
                                       ,middle_name
                                       ,last_name
                                       ,date_of_birth
                                       ,place_of_birth
                                       ,sex
                                       ,image
                                       ,nationality)
    values(l_fellow_passenger_rec.first_name
          ,l_fellow_passenger_rec.middle_name
          ,l_fellow_passenger_rec.last_name
          ,l_fellow_passenger_rec.date_of_birth
          ,l_fellow_passenger_rec.place_of_birth
          ,l_fellow_passenger_rec.sex
          ,l_fellow_passenger_rec.image
          ,l_fellow_passenger_rec.nationality)
    returning key_value into l_fellow_passenger_rec.person;

    insert into dl_bordercontrol.fellow_passenger(person
                                                 ,relation
                                                 ,nationality
                                                 ,receipt
                                                 ,tm6_no
                                                 ,first_name
                                                 ,middle_name
                                                 ,last_name
                                                 ,sex
                                                 ,date_of_birth
                                                 ,place_of_birth
                                                 ,reason
                                                 ,approval_status
                                                 ,image
                                                 ,mvmntid)
    values(l_fellow_passenger_rec.person
          ,l_fellow_passenger_rec.relation
          ,l_fellow_passenger_rec.nationality
          ,l_fellow_passenger_rec.receipt
          ,l_fellow_passenger_rec.tm6_no
          ,l_fellow_passenger_rec.first_name
          ,l_fellow_passenger_rec.middle_name
          ,l_fellow_passenger_rec.last_name
          ,l_fellow_passenger_rec.sex
          ,l_fellow_passenger_rec.date_of_birth
          ,l_fellow_passenger_rec.place_of_birth
          ,l_fellow_passenger_rec.reason
          ,l_fellow_passenger_rec.approval_status
          ,l_fellow_passenger_rec.image
          ,l_fellow_passenger_rec.mvmntid)
    returning key_value into l_fellow_passenger_rec.key_value;

    if l_fellow_passenger_rec.key_value is not null
    then
      l_status := 201;
      l_response_message := ''the fellow passenger was successfully created.'';
    end if;

    :response_status_code := l_status;
    :response_status_message := l_response_message;
    :response_pk := l_fellow_passenger_rec.key_value;

    :response := l_response;
    :status := l_status;

exception
    when others
    then
        :response_status_code    := l_status;
        :response_status_message := sqlerrm;
        --
        :status := l_status;
        :response := l_response;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'collectivePassport',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'collectivePassport',
      p_method             => 'POST',
      p_name               => 'responsePk',
      p_bind_variable_name => 'response_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'collectivePassport',
      p_method             => 'POST',
      p_name               => 'responseStatusCode',
      p_bind_variable_name => 'response_status_code',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'collectivePassport',
      p_method             => 'POST',
      p_name               => 'responseStatusMessage',
      p_bind_variable_name => 'response_status_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'movement',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'movement',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'DECLARE

    l_values         APEX_JSON.T_VALUES;
    l_source_blob    BLOB := :body;
    l_source_clob    CLOB;
    --
    l_response       CLOB;
    l_response_message    VARCHAR2(4000 CHAR);
    l_status         INTEGER := 400;
    --
    l_movement_rec      dl_bordercontrol.movements%ROWTYPE;
    l_movement_blob_rec dl_bordercontrol.movements_blob%ROWTYPE;
    l_entry_forms_rec   dl_bordercontrol.entry_forms%ROWTYPE;
    --
    l_dstoff         INTEGER := 1;
    l_srcoff         INTEGER := 1;
    l_lngctx         INTEGER := 0;
    l_warning        INTEGER;

BEGIN

    DBMS_LOB.CREATETEMPORARY(l_source_clob, TRUE);

    DBMS_LOB.CONVERTTOCLOB(dest_lob     => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''AL32UTF8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    APEX_JSON.PARSE (P_VALUES => l_values
                    ,P_SOURCE => l_source_clob);

    -- fill borderdocument-object (maybe also use get_borderdocument functionality?)
    l_movement_rec.brddocid         := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocumentId'');
    l_movement_rec.exitflg          := apex_json.get_varchar2(p_values => l_values, p_path => ''exitFlag'');
    l_movement_rec.max_stay_dt      := apex_json.get_date(p_values => l_values, p_path => ''maxStayDate'');
    l_movement_rec.ins_terminal     := apex_json.get_varchar2(p_values => l_values, p_path => ''terminal'');
    l_movement_rec.ins_borderpost   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderpost'');
    l_movement_rec.trnsprtunitid    := apex_json.get_varchar2(p_values => l_values, p_path => ''transportUnit'');
    l_movement_rec.person_type      := apex_json.get_varchar2(p_values => l_values, p_path => ''personType'');
    l_movement_rec.scanned_flight   := apex_json.get_varchar2(p_values => l_values, p_path => ''scannedFlight'');
    l_movement_rec.visa_type        := apex_json.get_varchar2(p_values => l_values, p_path => ''visaType'');
    l_movement_rec.visa             := apex_json.get_varchar2(p_values => l_values, p_path => ''visaId'');
    l_movement_rec.is_finished      := apex_json.get_varchar2(p_values => l_values, p_path => ''isFinished'');
    l_movement_rec.prior_movement   := apex_json.get_varchar2(p_values => l_values, p_path => ''priorMovementId'');
    l_movement_rec.movement_dt      := apex_json.get_date(p_values => l_values, p_path => ''movementDate'');
    l_movement_rec.date_of_entry    := apex_json.get_date(p_values => l_values, p_path => ''dateOfEntry'');
    l_movement_rec.mrzvisa          := apex_json.get_varchar2(p_values => l_values, p_path => ''mrzVisa'');
    -- Movement Images
    l_movement_blob_rec.live_photo  := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''livePhoto''));
    l_movement_blob_rec.wsq_ll := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLL''));
    l_movement_blob_rec.wsq_li := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLI''));
    l_movement_blob_rec.wsq_lm := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLM''));
    l_movement_blob_rec.wsq_lr := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLR''));
    l_movement_blob_rec.wsq_lt := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLT''));
    l_movement_blob_rec.wsq_rl := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRL''));
    l_movement_blob_rec.wsq_ri := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRI''));
    l_movement_blob_rec.wsq_rm := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRM''));
    l_movement_blob_rec.wsq_rr := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRR''));
    l_movement_blob_rec.wsq_rt := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRT''));
    -- Entry Form
    l_entry_forms_rec.form_no        := apex_json.get_varchar2(p_values => l_values, p_path => ''formNo'');
    l_entry_forms_rec.province       := apex_json.get_varchar2(p_values => l_values, p_path => ''province'');
    l_entry_forms_rec.district       := apex_json.get_varchar2(p_values => l_values, p_path => ''district'');
    l_entry_forms_rec.subdistrict    := apex_json.get_varchar2(p_values => l_values, p_path => ''subdistrict'');
    l_entry_forms_rec.address        := apex_json.get_varchar2(p_values => l_values, p_path => ''address'');
    l_entry_forms_rec.note           := apex_json.get_varchar2(p_values => l_values, p_path => ''note'');

    l_movement_rec.source_system  := 4;

    -- check if mandatory fields exist
    IF l_movement_rec.exitflg         IS NULL OR
       l_movement_rec.ins_terminal    IS NULL OR
       l_movement_rec.ins_borderpost  IS NULL OR
       l_movement_rec.is_finished     IS NULL OR
       l_movement_rec.movement_dt     IS NULL OR
       l_movement_rec.source_system   IS NULL
    THEN

      l_status := 405;
      l_response_message := '''';

      CASE WHEN l_movement_rec.exitflg        IS NULL THEN l_response_message := l_response_message || ''; exitFlag must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.ins_terminal   IS NULL THEN l_response_message := l_response_message || ''; terminal must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.ins_borderpost IS NULL THEN l_response_message := l_response_message || ''; borderpost must not be empty'';    ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.is_finished    IS NULL THEN l_response_message := l_response_message || ''; isFinished must not be empty'';    ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.movement_dt    IS NULL THEN l_response_message := l_response_message || ''; movementDate must not be empty'';  ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.source_system  IS NULL THEN l_response_message := l_response_message || ''; sourceSystem must not be empty'';  ELSE NULL; END CASE;

    ELSE

        INSERT INTO dl_bordercontrol.movements(brddocid
                                              ,exitflg
                                              ,max_stay_dt
                                              ,ins_terminal
                                              ,ins_borderpost
                                              ,trnsprtunitid
                                              ,person_type
                                              ,scanned_flight
                                              ,visa_type
                                              ,visa
                                              ,is_finished
                                              ,prior_movement
                                              ,movement_dt
                                              ,date_of_entry
                                              ,mrzvisa
                                              ,source_system)
        VALUES (l_movement_rec.brddocid
               ,l_movement_rec.exitflg
               ,l_movement_rec.max_stay_dt
               ,l_movement_rec.ins_terminal
               ,l_movement_rec.ins_borderpost
               ,l_movement_rec.trnsprtunitid
               ,l_movement_rec.person_type
               ,l_movement_rec.scanned_flight
               ,l_movement_rec.visa_type
               ,l_movement_rec.visa
               ,l_movement_rec.is_finished
               ,l_movement_rec.prior_movement
               ,l_movement_rec.movement_dt
               ,l_movement_rec.date_of_entry
               ,l_movement_rec.mrzvisa
               ,l_movement_rec.source_system)
        RETURNING mvmntid INTO l_movement_rec.mvmntid;

        -- insert movement_blobs if they are not null
        if l_movement_blob_rec.live_photo is not null or
           l_movement_blob_rec.wsq_ll is not null or
           l_movement_blob_rec.wsq_li is not null or
           l_movement_blob_rec.wsq_lm is not null or
           l_movement_blob_rec.wsq_lr is not null or
           l_movement_blob_rec.wsq_lt is not null or
           l_movement_blob_rec.wsq_rl is not null or
           l_movement_blob_rec.wsq_ri is not null or
           l_movement_blob_rec.wsq_rm is not null or
           l_movement_blob_rec.wsq_rr is not null or
           l_movement_blob_rec.wsq_rt is not null
        then
            insert into dl_bordercontrol.movements_blob (mvmnt_id
                                                        ,live_photo
                                                        ,wsq_ll
                                                        ,wsq_li
                                                        ,wsq_lm
                                                        ,wsq_lr
                                                        ,wsq_lt
                                                        ,wsq_rl
                                                        ,wsq_ri
                                                        ,wsq_rm
                                                        ,wsq_rr
                                                        ,wsq_rt
                                                        ,ins_terminal
                                                        ,ins_borderpost)

            values (l_movement_rec.mvmntid
                   ,l_movement_blob_rec.live_photo
                   ,l_movement_blob_rec.wsq_ll
                   ,l_movement_blob_rec.wsq_li
                   ,l_movement_blob_rec.wsq_lm
                   ,l_movement_blob_rec.wsq_lr
                   ,l_movement_blob_rec.wsq_lt
                   ,l_movement_blob_rec.wsq_rl
                   ,l_movement_blob_rec.wsq_ri
                   ,l_movement_blob_rec.wsq_rm
                   ,l_movement_blob_rec.wsq_rr
                   ,l_movement_blob_rec.wsq_rt
                   ,l_movement_rec.ins_terminal
                   ,l_movement_rec.ins_borderpost);
        end if;

        -- insert entry_form
        if l_entry_forms_rec.form_no is not null
        then
            insert into dl_bordercontrol.entry_forms (form_no
                                                     ,province
                                                     ,district
                                                     ,subdistrict
                                                     ,address
                                                     ,note
                                                     ,ins_terminal
                                                     ,ins_borderpost)
            values (l_entry_forms_rec.form_no
                   ,l_entry_forms_rec.province
                   ,l_entry_forms_rec.district
                   ,l_entry_forms_rec.subdistrict
                   ,l_entry_forms_rec.address
                   ,l_entry_forms_rec.note
                   ,l_movement_rec.ins_terminal
                   ,l_movement_rec.ins_borderpost)
            returning key_value into l_movement_rec.entry_form;

            -- insert entry_form id into movements
            update dl_bordercontrol.movements set entry_form = l_movement_rec.entry_form
            where mvmntid = l_movement_rec.mvmntid;

        end if;
    END IF;

    IF l_movement_rec.mvmntid IS NOT NULL
    THEN
      l_status := 201;
      l_response_message := ''The movement was successfully created.'';
    END IF;

    :response_status_code := l_status;
    :response_status_message := l_response_message;
    :response_pk := l_movement_rec.mvmntid;

    :response := l_response;
    :status := l_status;

EXCEPTION
    WHEN OTHERS
    THEN
        :response_status_code    := l_status;
        :response_status_message := SQLERRM;
        --
        :status := l_status;
        :response := l_response;
END;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'responsePK',
      p_bind_variable_name => 'response_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'responseStatusCode',
      p_bind_variable_name => 'response_status_code',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'responseStatusMessage',
      p_bind_variable_name => 'response_status_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'movement/insert',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern        => 'movement/insert',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare

    l_values         apex_json.t_values;
    l_source_blob    blob := :body;
    l_source_clob    clob;
    --
    l_response            clob;
    l_response_message    varchar2(4000 char);
    l_status              integer := 204;
    --
    l_movement_rec          dl_bordercontrol.movements%rowtype;
    l_borderdocument_rec    dl_bordercontrol.borderdocuments%rowtype;
    --
    l_dstoff     integer := 1;
    l_srcoff     integer := 1;
    l_lngctx     integer := 0;
    l_warning    integer;

begin

    -- initialize, convert and parse
    dbms_lob.createtemporary(l_source_clob, true);

    dbms_lob.converttoclob(dest_lob    => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''AL32UTF8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    apex_json.parse(p_values => l_values
                   ,p_source => l_source_clob);

    -- Load all mandatory fields

    -- borderdouments; load brddocid
    l_borderdocument_rec.brddocid       := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.id'');

    if l_borderdocument_rec.brddocid is null
    then
        -- borderdocuments; load all mandatory fields only if brddocid is null
        l_borderdocument_rec.doctype        := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.documentType'');
        l_borderdocument_rec.docno          := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.documentNumber'');
        l_borderdocument_rec.issuectry      := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.issuingCountryId'');
        l_borderdocument_rec.nat            := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.nationalityId'');
        l_borderdocument_rec.dob            := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.dateOfBirthCode'');
        l_borderdocument_rec.expirydate     := apex_json.get_date(p_values => l_values, p_path => ''borderdocument.expiryDate'');
        l_borderdocument_rec.surname        := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.surname'');
        l_borderdocument_rec.ins_terminal   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.createdByTerminalId'');
        l_borderdocument_rec.ins_borderpost := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.createdByBorderpostId'');
        l_borderdocument_rec.sex            := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.genderId'');
    end if;

    -- movements; load all mandatory fields
    l_movement_rec.exitflg          := apex_json.get_varchar2(p_values => l_values, p_path => ''exitFlag'');
    l_movement_rec.ins_terminal     := apex_json.get_varchar2(p_values => l_values, p_path => ''terminal'');
    l_movement_rec.ins_borderpost   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderpost'');
    l_movement_rec.source_system    := apex_json.get_varchar2(p_values => l_values, p_path => ''sourceSystem'');


    -- check if all mandatory fields are filled

    -- borderdocuments; check if brddocid is null
    if l_borderdocument_rec.brddocid is null
    then
        -- borderdocuments; check if all mandatory fields are filled only if brddocid is null
        if  l_borderdocument_rec.doctype        is null or
            l_borderdocument_rec.docno          is null or
            l_borderdocument_rec.issuectry      is null or
            l_borderdocument_rec.nat            is null or
            l_borderdocument_rec.dob            is null or
            l_borderdocument_rec.expirydate     is null or
            l_borderdocument_rec.surname        is null or
            l_borderdocument_rec.ins_terminal   is null or
            l_borderdocument_rec.ins_borderpost is null or
            l_borderdocument_rec.sex            is null
        then
            l_status := 400;
            l_response_message := ''Import failed; Borderdocument:'';

            case when l_borderdocument_rec.doctype        is null then l_response_message := l_response_message || ''borderdocument.documentType, '';           else null; end case;
            case when l_borderdocument_rec.docno          is null then l_response_message := l_response_message || ''borderdocument.documentNumber, '';         else null; end case;
            case when l_borderdocument_rec.issuectry      is null then l_response_message := l_response_message || ''borderdocument.issuingCountryId, '';       else null; end case;
            case when l_borderdocument_rec.nat            is null then l_response_message := l_response_message || ''borderdocument.nationalityId, '';          else null; end case;
            case when l_borderdocument_rec.dob            is null then l_response_message := l_response_message || ''borderdocument.dateOfBirthCode, '';        else null; end case;
            case when l_borderdocument_rec.expirydate     is null then l_response_message := l_response_message || ''borderdocument.expiryDate, '';             else null; end case;
            case when l_borderdocument_rec.surname        is null then l_response_message := l_response_message || ''borderdocument.surname, '';                else null; end case;
            case when l_borderdocument_rec.ins_terminal   is null then l_response_message := l_response_message || ''borderdocument.createdByTerminalId, '';    else null; end case;
            case when l_borderdocument_rec.ins_borderpost is null then l_response_message := l_response_message || ''borderdocument.createdByBorderpostId, '';  else null; end case;
            case when l_borderdocument_rec.sex            is null then l_response_message := l_response_message || ''borderdocument.genderId, '';               else null; end case;

            l_response_message := substr(l_response_message, 1, length(l_response_message) - 2) || '' is missing.'';

        end if;
    end if;

    -- movements; check if all mandatory fields are filled
    if  l_movement_rec.exitflg          is null or
        l_movement_rec.ins_terminal     is null or
        l_movement_rec.ins_borderpost   is null or
        l_movement_rec.source_system    is null
    then
        l_status := 400;
        l_response_message := l_response_message || ''Import failed; Movement:'';

        case when l_movement_rec.exitflg          is null then l_response_message := l_response_message || ''exitFlag, '';            else null; end case;
        case when l_movement_rec.ins_terminal     is null then l_response_message := l_response_message || ''terminal, '';            else null; end case;
        case when l_movement_rec.ins_borderpost   is null then l_response_message := l_response_message || ''borderpost, '';          else null; end case;
        case when l_movement_rec.source_system    is null then l_response_message := l_response_message || ''sourceSystem, '';          else null; end case;

        l_response_message := substr(l_response_message, 1, length(l_response_message) - 2) || '' is missing.'';

    end if;

    -- borderdocuments; load brddocid and insert into borderdocuments
    if l_borderdocument_rec.brddocid is null and l_status != 400
    then

        -- borderdocuments; load all non mandatory fields
        l_borderdocument_rec.givenname              := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.givenName'');
        l_borderdocument_rec.optionaldata           := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.optionalData'');
        l_borderdocument_rec.afisid                 := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.afisId'');
        l_borderdocument_rec.officer_observation    := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.officerObservation'');
        l_borderdocument_rec.mrzdg1                 := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.mrzDg1'');
        l_borderdocument_rec.p_01                   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.p01'');
        l_borderdocument_rec.p_02                   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.p02'');
        l_borderdocument_rec.p_03                   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.p03'');
        l_borderdocument_rec.p_04                   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.p04'');
        l_borderdocument_rec.p_05                   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.p05'');
        l_borderdocument_rec.middlename             := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.middleName'');
        l_borderdocument_rec.givenname_thai         := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.thaiGivenName'');
        l_borderdocument_rec.middlename_thai        := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.thaiMiddleName'');
        l_borderdocument_rec.surname_thai           := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.thaiSurname'');
        l_borderdocument_rec.calc_dob               := apex_json.get_date(p_values => l_values, p_path => ''borderdocument.dateOfBirthDate'');
        l_borderdocument_rec.manual_expiry_date     := apex_json.get_date(p_values => l_values, p_path => ''borderdocument.manualExpiryDate'');
        l_borderdocument_rec.manual_issuing_date    := apex_json.get_date(p_values => l_values, p_path => ''borderdocument.manualIssuingDate'');
        l_borderdocument_rec.manual_nationality     := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.manualNationalityId'');
        l_borderdocument_rec.manual_placeofbirth    := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.manualPlaceOfBirth'');
        l_borderdocument_rec.docclass               := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.documentClassId'');
        l_borderdocument_rec.sub_nationality        := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.subNationality'');


        -- since brddocid is null, try to load from table
        l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.get_document ( p_docno      => l_borderdocument_rec.docno
                                                                                                ,p_issuectry  => l_borderdocument_rec.issuectry
                                                                                                ,p_expirydate => l_borderdocument_rec.expirydate);

        -- If brddocid is still null then create new entry
        if l_borderdocument_rec.brddocid is null
        then
            insert into dl_bordercontrol.borderdocuments(doctype
                                                        ,docno
                                                        ,issuectry
                                                        ,nat
                                                        ,dob
                                                        ,expirydate
                                                        ,givenname
                                                        ,surname
                                                        ,optionaldata
                                                        ,ins_terminal
                                                        ,ins_borderpost
                                                        ,mrzdg1
                                                        ,middlename
                                                        ,givenname_thai
                                                        ,middlename_thai
                                                        ,surname_thai
                                                        ,manual_expiry_date
                                                        ,manual_issuing_date
                                                        ,manual_nationality
                                                        ,manual_placeofbirth
                                                        ,sex
                                                        ,docclass
                                                        ,sub_nationality)
                values(l_borderdocument_rec.doctype
                    ,l_borderdocument_rec.docno
                    ,l_borderdocument_rec.issuectry
                    ,l_borderdocument_rec.nat
                    ,l_borderdocument_rec.dob
                    ,l_borderdocument_rec.expirydate
                    ,l_borderdocument_rec.givenname
                    ,l_borderdocument_rec.surname
                    ,l_borderdocument_rec.optionaldata
                    ,l_borderdocument_rec.ins_terminal
                    ,l_borderdocument_rec.ins_borderpost
                    ,l_borderdocument_rec.mrzdg1
                    ,l_borderdocument_rec.middlename
                    ,l_borderdocument_rec.givenname_thai
                    ,l_borderdocument_rec.middlename_thai
                    ,l_borderdocument_rec.surname_thai
                    ,l_borderdocument_rec.manual_expiry_date
                    ,l_borderdocument_rec.manual_issuing_date
                    ,l_borderdocument_rec.manual_nationality
                    ,l_borderdocument_rec.manual_placeofbirth
                    ,l_borderdocument_rec.sex
                    ,l_borderdocument_rec.docclass
                    ,l_borderdocument_rec.sub_nationality)
                returning brddocid into l_borderdocument_rec.brddocid;
        end if;
    end if;

    -- movements; load all fields and insert into borderdocuments
    if l_status != 400
    then

        -- movements; load all non mandatory fields
        l_movement_rec.landbarcd            := apex_json.get_varchar2(p_values => l_values, p_path => ''landbarCode'');
        l_movement_rec.max_stay_dt          := apex_json.get_date(p_values => l_values, p_path => ''maxStayDate'');
        l_movement_rec.fingermatch          := apex_json.get_varchar2(p_values => l_values, p_path => ''fingermatch'');
        l_movement_rec.facematch            := apex_json.get_varchar2(p_values => l_values, p_path => ''facematch'');
        l_movement_rec.mvmntaddr            := apex_json.get_varchar2(p_values => l_values, p_path => ''movementAddress'');
        l_movement_rec.oridest              := apex_json.get_varchar2(p_values => l_values, p_path => ''oriDest'');
        l_movement_rec.refusedflg           := apex_json.get_varchar2(p_values => l_values, p_path => ''refusedFlag'');
        l_movement_rec.observation          := apex_json.get_varchar2(p_values => l_values, p_path => ''observation'');
        l_movement_rec.trnsprtunitid        := apex_json.get_varchar2(p_values => l_values, p_path => ''transportUnitId'');
        l_movement_rec.person_type          := apex_json.get_varchar2(p_values => l_values, p_path => ''personType'');
        l_movement_rec.scanned_flight       := apex_json.get_varchar2(p_values => l_values, p_path => ''scannedFlight'');
        l_movement_rec.ps_1                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps1'');
        l_movement_rec.ps_2                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps2'');
        l_movement_rec.ps_3                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps3'');
        l_movement_rec.ps_4                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps4'');
        l_movement_rec.ps_5                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps5'');
        l_movement_rec.ps_6                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps6'');
        l_movement_rec.ps_7                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps7'');
        l_movement_rec.ps_8                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps8'');
        l_movement_rec.ps_9                 := apex_json.get_varchar2(p_values => l_values, p_path => ''ps9'');
        l_movement_rec.ps_10                := apex_json.get_varchar2(p_values => l_values, p_path => ''ps10'');
        l_movement_rec.fingermatch_history  := apex_json.get_varchar2(p_values => l_values, p_path => ''fingermatchHistory'');
        l_movement_rec.facematc_history     := apex_json.get_varchar2(p_values => l_values, p_path => ''facematchHistory'');
        l_movement_rec.reason_offload       := apex_json.get_varchar2(p_values => l_values, p_path => ''reasonOffload'');
        l_movement_rec.reason_deportee      := apex_json.get_varchar2(p_values => l_values, p_path => ''reasonDeportee'');
        l_movement_rec.visa_type            := apex_json.get_varchar2(p_values => l_values, p_path => ''visaType'');
        l_movement_rec.visa                 := apex_json.get_varchar2(p_values => l_values, p_path => ''visa'');
        l_movement_rec.is_finished      := apex_json.get_varchar2(p_values => l_values, p_path => ''isFinishedFlag'');
        l_movement_rec.prior_movement       := apex_json.get_varchar2(p_values => l_values, p_path => ''priorMovementId'');
        l_movement_rec.entry_form           := apex_json.get_varchar2(p_values => l_values, p_path => ''entryForm'');
        l_movement_rec.form_no_approved := apex_json.get_varchar2(p_values => l_values, p_path => ''entryFormNoApproved'');
        l_movement_rec.movement_dt      := apex_json.get_date(p_values => l_values, p_path => ''movementDate'');
        l_movement_rec.date_of_entry        := apex_json.get_date(p_values => l_values, p_path => ''dateOfEntry'');
        l_movement_rec.mrzvisa              := apex_json.get_varchar2(p_values => l_values, p_path => ''mrzVisa'');

        insert into dl_bordercontrol.movements(brddocid
                                            ,landbarcd
                                            ,exitflg
                                            ,max_stay_dt
                                            ,ins_terminal
                                            ,ins_borderpost
                                            ,mvmntaddr
                                            ,oridest
                                            ,refusedflg
                                            ,observation
                                            ,trnsprtunitid
                                            ,person_type
                                            ,scanned_flight
                                            ,ps_1
                                            ,ps_2
                                            ,ps_3
                                            ,ps_4
                                            ,ps_5
                                            ,ps_6
                                            ,ps_7
                                            ,ps_8
                                            ,ps_9
                                            ,ps_10
                                            ,fingermatch_history
                                            ,facematc_history
                                            ,reason_offload
                                            ,reason_deportee
                                            ,visa_type
                                            ,visa
                                            ,is_finished
                                            ,prior_movement
                                            ,entry_form
                                            ,form_no_approved
                                            ,movement_dt
                                            ,source_system
                                            ,date_of_entry
                                            ,mrzvisa)
        values ( l_borderdocument_rec.brddocid
                ,l_movement_rec.landbarcd
                ,l_movement_rec.exitflg
                ,l_movement_rec.max_stay_dt
                ,l_movement_rec.ins_terminal
                ,l_movement_rec.ins_borderpost
                ,l_movement_rec.mvmntaddr
                ,l_movement_rec.oridest
                ,l_movement_rec.refusedflg
                ,l_movement_rec.observation
                ,l_movement_rec.trnsprtunitid
                ,l_movement_rec.person_type
                ,l_movement_rec.scanned_flight
                ,l_movement_rec.ps_1
                ,l_movement_rec.ps_2
                ,l_movement_rec.ps_3
                ,l_movement_rec.ps_4
                ,l_movement_rec.ps_5
                ,l_movement_rec.ps_6
                ,l_movement_rec.ps_7
                ,l_movement_rec.ps_8
                ,l_movement_rec.ps_9
                ,l_movement_rec.ps_10
                ,l_movement_rec.fingermatch_history
                ,l_movement_rec.facematc_history
                ,l_movement_rec.reason_offload
                ,l_movement_rec.reason_deportee
                ,l_movement_rec.visa_type
                ,l_movement_rec.visa
                ,l_movement_rec.is_finished
                ,l_movement_rec.prior_movement
                ,l_movement_rec.entry_form
                ,l_movement_rec.form_no_approved
                ,l_movement_rec.movement_dt
                ,l_movement_rec.source_system
                ,l_movement_rec.date_of_entry
                ,l_movement_rec.mrzvisa)
        returning mvmntid into l_movement_rec.mvmntid;
    end if;

    -- Check if import was successful
    if l_movement_rec.mvmntid is not null
    then
      l_status := 201;
      l_response_message := ''The movement was successfully imported.'';
    end if;

    :response_status_code := l_status;
    :response_status_message := l_response_message;
    :response_movement_pk := l_movement_rec.mvmntid;
    :response_brddocid_pk := l_borderdocument_rec.brddocid;

    --:response := l_response;
    :status := l_status;

exception
    when others
    then
        l_status := 500;
        :response_status_code    := l_status;
        :response_status_message := sqlerrm;
        --
        :status := l_status;
        :response := l_response;

end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement/insert',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement/insert',
      p_method             => 'POST',
      p_name               => 'responseBorderdocumentPK',
      p_bind_variable_name => 'response_brddocid_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement/insert',
      p_method             => 'POST',
      p_name               => 'responseMovementPK',
      p_bind_variable_name => 'response_movement_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement/insert',
      p_method             => 'POST',
      p_name               => 'responseStatusCode',
      p_bind_variable_name => 'response_status_code',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'Data Services (Ins/Upd/Del Movements, Borderdocs etc.)',
      p_pattern            => 'movement/insert',
      p_method             => 'POST',
      p_name               => 'responseStatusMessage',
      p_bind_variable_name => 'response_status_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);



COMMIT;

END;


/
timing for: TIMER_REST_EXPORT
Elapsed: 00:00:00.16
