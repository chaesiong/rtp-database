
-- Generated by ORDS REST Data Services 18.4.0.r3541002
-- Schema: DL_BORDERCONTROL Date: removed for diff
--

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'DL_BORDERCONTROL',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'dl_bordercontrol',
      p_auto_rest_auth      => FALSE);

  ORDS.DEFINE_MODULE(
      p_module_name    => 'BmBS',
      p_base_path      => '/bmbs/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/dataSync',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/dataSync',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application-json',
      p_comments       => NULL,
      p_source         =>
'declare
    --
    l_values      apex_json.t_values;
    l_source_blob blob := :body;
    l_source_clob clob;
    --
    l_response         clob;
    l_response_message varchar2(4000);
    l_status           integer := 400;
    --
    l_borderpost         dl_bordercontrol.borderposts.key_value%TYPE;
    l_terminal           dl_bordercontrol.terminals.id%TYPE;
    l_borderdocument_rec dl_bordercontrol.borderdocuments%ROWTYPE;
    l_identity           dl_bordercontrol.identities.identity%TYPE;
    l_movement_rec       dl_bordercontrol.movements%ROWTYPE;
    l_movement_blob_rec  dl_bordercontrol.movements_blob%ROWTYPE;
    l_visas_rec          dl_bordercontrol.visas%ROWTYPE;
    l_entry_forms_rec    dl_bordercontrol.entry_forms%ROWTYPE;
    --
    l_photo_scan blob;
    l_photo_chip blob;
    l_photo_pass blob;
    --
    l_abis_insert boolean := false;
    l_abis        number;
    --
    l_dstoff  integer := 1;
    l_srcoff  integer := 1;
    l_lngctx  integer := 0;
    l_warning integer;
    --
    l_username varchar2 (4000);
    l_ip       varchar2 (4000);
    l_ins_by   varchar2 (4000);
    --
    l_incidents_rec dl_bordercontrol.incidents%ROWTYPE;
    --
    type t_fellow_passengers is table of dl_bordercontrol.fellow_passenger%ROWTYPE index by pls_integer;
    l_fellow_passengers t_fellow_passengers;
    l_fellow_passenger_cnt number;
    l_fellow_passenger_person dl_bordercontrol.fellow_passenger.person%type;
    --
    l_movement_is_duplicate number := 0;

begin
    -- convert json
    dbms_lob.createtemporary(l_source_clob, true);

    dbms_lob.converttoclob(
       dest_lob      => l_source_clob
       ,src_blob     => l_source_blob
       ,amount       => dbms_lob.lobmaxsize
       ,dest_offset  => l_dstoff
       ,src_offset   => l_srcoff
       ,blob_csid    => nls_charset_id(''al32utf8'')
       ,lang_context => l_lngctx
       ,warning      => l_warning);

    apex_json.parse (p_values => l_values
                    ,p_source => l_source_clob);

    -- read json and fill records

    -- general data
    l_borderpost := apex_json.get_varchar2(p_values => l_values, p_path => ''borderpost'');
    l_terminal   := apex_json.get_varchar2(p_values => l_values, p_path => ''terminal'');
    l_username   := apex_json.get_varchar2(p_values => l_values, p_path => ''username'');
    l_ip         := apex_json.get_varchar2(p_values => l_values, p_path => ''ip'');
    l_ins_by     := l_username || '' @Offline Mode ('' || apex_json.get_varchar2(p_values => l_values, p_path => ''ip'') || '')'';

    -- borderdocument
    l_borderdocument_rec.doctype             := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.documentType'');
    l_borderdocument_rec.docno               := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.passportNumber'');
    l_borderdocument_rec.issuectry           := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.issuingCountry'');
    l_borderdocument_rec.nat                 := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.nationality'');
    l_borderdocument_rec.dob                 := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.dateOfBirth'');
    l_borderdocument_rec.expirydate          := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.expiryDate''), ''YYYY-MM-DD'');
    l_borderdocument_rec.givenname           := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.givenname'');
    l_borderdocument_rec.surname             := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.surname'');
    l_borderdocument_rec.middlename          := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.middlename'');
    l_borderdocument_rec.optionaldata        := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.optionalData'');
    --l_borderdocument_rec.afisid            := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.abisId'');
    l_borderdocument_rec.mrzdg1              := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.mrz'');
    l_borderdocument_rec.givenname_thai      := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.givennameThai'');
    l_borderdocument_rec.middlename_thai     := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.middlenameThai'');
    l_borderdocument_rec.surname_thai        := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.surnameThai'');
    l_borderdocument_rec.manual_expiry_date  := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.manualExpiryDate''), ''YYYY-MM-DD'');
    l_borderdocument_rec.manual_issuing_date := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.manualIssuingDate''), ''YYYY-MM-DD'');
    l_borderdocument_rec.manual_nationality  := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.manualNationality'');
    l_borderdocument_rec.manual_placeofbirth := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.manualPlaceOfBirth'');
    l_borderdocument_rec.sex                 := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.gender'');
    l_borderdocument_rec.docclass            := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.documentClass'');
    l_borderdocument_rec.sub_nationality     := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.subNationality'');
    l_borderdocument_rec.source_system       := apex_json.get_number(p_values => l_values, p_path => ''sourceSystem'');
    l_borderdocument_rec.calc_mrzdg1         := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.mrzWithCorrectCheckSum'');
    l_photo_scan                             := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''borderdocument.photoScan''));
    l_photo_chip                             := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''borderdocument.photoChip''));
    l_photo_pass                             := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''borderdocument.photoPass''));

    -- check if borderdocuments fields exist, abort if not
    if l_borderpost                    is null or
       l_terminal                      is null or
       l_borderdocument_rec.doctype    is null or
       l_borderdocument_rec.docno      is null or
       l_borderdocument_rec.issuectry  is null or
       l_borderdocument_rec.nat        is null or
       l_borderdocument_rec.dob        is null or
       l_borderdocument_rec.expirydate is null or
       l_borderdocument_rec.surname    is null or
       l_borderdocument_rec.sex        is null
    then
       l_response_message := ''Error during borderdocument data validation. The following fields must not be null: '';

       case when l_borderpost                    is null then l_response_message := l_response_message || ''borderpost,'';                      else null; end case;
       case when l_terminal                      is null then l_response_message := l_response_message || ''terminal, '';                       else null; end case;
       case when l_borderdocument_rec.doctype    is null then l_response_message := l_response_message || ''borderdocument.documentType, '';    else null; end case;
       case when l_borderdocument_rec.docno      is null then l_response_message := l_response_message || ''borderdocument.passportNumber, '';  else null; end case;
       case when l_borderdocument_rec.issuectry  is null then l_response_message := l_response_message || ''borderdocument.issuingCountry, '';  else null; end case;
       case when l_borderdocument_rec.nat        is null then l_response_message := l_response_message || ''borderdocument.nationality, '';     else null; end case;
       case when l_borderdocument_rec.dob        is null then l_response_message := l_response_message || ''borderdocument.dateOfBirth, '';     else null; end case;
       case when l_borderdocument_rec.expirydate is null then l_response_message := l_response_message || ''borderdocument.expiryDate, '';      else null; end case;
       case when l_borderdocument_rec.surname    is null then l_response_message := l_response_message || ''borderdocument.surname, '';         else null; end case;
       case when l_borderdocument_rec.sex        is null then l_response_message := l_response_message || ''borderdocument.gender, '';          else null; end case;

       l_response_message := substr(l_response_message, 1, length(l_response_message) - 2) || ''. Please provide them and try again.'';

       :status         := 406;
       :message        := l_response_message;
       :borderdocument := null;
       :movement       := null;
       :abis           := null;
       return;
    end if;

    -- movement
    l_movement_rec.exitflg          := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.exitFlag'');
    l_movement_rec.max_stay_dt      := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''movement.maxStayDate''), ''YYYY-MM-DD'');
    l_movement_rec.observation      := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.observation'');
    l_movement_rec.trnsprtunitid    := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.transportUnit'');
    if apex_json.get_varchar2(p_values => l_values, p_path => ''movement.personType'') = ''1'' then
        l_movement_rec.person_type := 2; --crew
    else
        l_movement_rec.person_type := 1; --passenger
    end if;
    l_movement_rec.scanned_flight   := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.scannedFlight'');
    l_movement_rec.visa_type        := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visaType'');
    l_movement_rec.date_of_entry    := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''movement.dateOfEntry''),''YYYY-MM-DD HH24:MI:SS'');
    l_movement_rec.mrzvisa          := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.mrzVisa'');
    l_movement_rec.form_no_approved := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6Approved'');
    l_movement_rec.ps_4             := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.supervisorReason'');
    if l_movement_rec.ps_4 is not null then
        l_movement_rec.ps_3             := l_username;
    end if;
    l_movement_rec.ps_6             := to_number(apex_json.get_varchar2(p_values => l_values, p_path => ''movement.isBlacklisted''));
    l_movement_rec.source_system    := l_borderdocument_rec.source_system;
    -- movement images
    l_movement_blob_rec.live_photo  := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.livePhoto''));
    l_movement_blob_rec.wsq_ll      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerLL''));
    l_movement_blob_rec.wsq_li      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerLI''));
    l_movement_blob_rec.wsq_lm      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerLM''));
    l_movement_blob_rec.wsq_lr      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerLR''));
    l_movement_blob_rec.wsq_lt      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerLT''));
    l_movement_blob_rec.wsq_rl      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerRL''));
    l_movement_blob_rec.wsq_ri      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerRI''));
    l_movement_blob_rec.wsq_rm      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerRM''));
    l_movement_blob_rec.wsq_rr      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerRR''));
    l_movement_blob_rec.wsq_rt      := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.fingerRT''));
    --visa
    l_visas_rec.visa_number          := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visa.no'');
    l_visas_rec.expiry_date          := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visa.expiryDate''), ''YYYY-MM-DD'');
    l_visas_rec.issuing_date         := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visa.issuingDate''), ''YYYY-MM-DD'');
    l_visas_rec.issuing_place        := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visa.issuingPlace'');
    l_visas_rec.additional_info      := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visa.additionalInfo'');
    l_visas_rec.permit_type          := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.permitType'');
    l_visas_rec.permit_expiry_date   := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''movement.visa.permitExpiryDate''), ''YYYY-MM-DD'');
    l_visas_rec.visa_image           := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.visa.image''));
    -- entry form
    l_entry_forms_rec.form_no       := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6.no'');
    l_entry_forms_rec.province      := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6.province'');
    l_entry_forms_rec.district      := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6.ampur'');
    l_entry_forms_rec.subdistrict   := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6.tambon'');
    l_entry_forms_rec.address       := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6.address'');
    l_entry_forms_rec.note          := apex_json.get_varchar2(p_values => l_values, p_path => ''movement.tm6.note'');
    l_entry_forms_rec.form_image    := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''movement.tm6.image''));

    -- check if movement fields exist, abort if not
    if l_movement_rec.exitflg         is null or
       l_movement_rec.trnsprtunitid   is null or
       l_movement_rec.person_type     is null or
       l_movement_rec.date_of_entry   is null
    then
       l_response_message := ''Error during movement data validation. The following fields must not be null: '';

       case when l_movement_rec.exitflg        is null then l_response_message := l_response_message || ''movement.exitFlag, '';      else null; end case;
       case when l_movement_rec.trnsprtunitid  is null then l_response_message := l_response_message || ''movement.transportUnit, '';  else null; end case;
       case when l_movement_rec.person_type    is null then l_response_message := l_response_message || ''movement.personType, '';  else null; end case;
       case when l_movement_rec.date_of_entry  is null then l_response_message := l_response_message || ''movement.dateOfEntry, '';  else null; end case;

       l_response_message := substr(l_response_message, 1, length(l_response_message) - 2) || ''. Please provide them and try again.'';

       :status         := 406;
       :message        := l_response_message;
       :borderdocument := null;
       :movement       := null;
       :abis           := null;
       return;
    end if;

    -- blacklist
    if apex_json.get_count(p_values => l_values, p_path => ''borderdocument.blacklisted.record'') is not null then
        l_incidents_rec.type                            := 10;
        l_incidents_rec.bl_status                       := ''A'';
        l_incidents_rec.bl_number_of_hits               := 1;
        case l_borderdocument_rec.sex
            when 1 then l_incidents_rec.gender          := ''M'';
            when 2 then l_incidents_rec.gender          := ''F'';
            else        l_incidents_rec.gender          := ''X'';
        end case;
        if apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.blacklisted.decision.action'') = ''1'' then
            l_incidents_rec.bl_action                       := ''A'';
            l_incidents_rec.bl_approved_identity_score      := apex_json.get_number(p_values => l_values, p_path => ''borderdocument.blacklisted.record.score'');
            l_movement_rec.ps_5                             := 1;
        else
            l_incidents_rec.bl_action                       := ''C'';
            l_incidents_rec.bl_approved_identity_score      := null;
            l_movement_rec.ps_5                             := 0;
        end if;
        l_incidents_rec.supervisor                      := regexp_substr(regexp_substr(
                                                              apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.blacklisted.decision.reason'')
                                                              ,''^.+[|]{2}'', 1),''^[^|]+'');
        l_incidents_rec.bl_remarks                      := substr(regexp_substr(
                                                              apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocument.blacklisted.decision.reason'')
                                                           ,''[|]{2}.+$'', 1),3);
    end if;

    -- fellow passengers
    l_fellow_passenger_cnt := apex_json.get_count(p_values => l_values, p_path => ''fellowPassengers'');
    for idx in 1 .. l_fellow_passenger_cnt loop
        l_fellow_passengers(idx).relation        := apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].relationId'');
        l_fellow_passengers(idx).last_name       := apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].surName'');
        l_fellow_passengers(idx).first_name      := apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].givenName'');
        l_fellow_passengers(idx).date_of_birth   := to_date(apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].dateOfBirth''),''YYYY-MM-DD'');
        l_fellow_passengers(idx).sex             := apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].sex'');
        l_fellow_passengers(idx).nationality     := apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].nationality'');
        l_fellow_passengers(idx).tm6_no          := apex_json.get_varchar2(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].tm6No'');
        l_fellow_passengers(idx).image           := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fellowPassengers['' || idx || ''].faceImage''));
    end loop;

    -- inserting data into tables
    begin

    -- borderdocument
    -- borderdocument check if exists
    l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.get_document (
       p_docno      => l_borderdocument_rec.docno
       ,p_issuectry  => l_borderdocument_rec.issuectry
       ,p_expirydate => l_borderdocument_rec.expirydate);

    -- borderdocument does not exist
    if l_borderdocument_rec.brddocid is null
    then
        l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.create_document(
           l_borderdocument_rec.docno
           ,l_borderdocument_rec.doctype
           ,l_borderdocument_rec.issuectry
           ,l_borderdocument_rec.expirydate
           ,l_borderdocument_rec.surname
           ,l_borderdocument_rec.middlename
           ,l_borderdocument_rec.givenname
           ,l_borderdocument_rec.sex
           ,l_borderdocument_rec.dob
           ,l_borderdocument_rec.mrzdg1
           ,l_terminal
           ,l_borderpost
           ,l_photo_scan
           ,l_photo_chip
           ,l_photo_pass
           ,null
           ,null
           ,null
           ,null
           ,l_borderdocument_rec.manual_expiry_date
           ,l_borderdocument_rec.manual_issuing_date
           ,l_borderdocument_rec.manual_nationality
           ,l_borderdocument_rec.manual_placeofbirth
           ,l_borderdocument_rec.docclass
           ,l_identity);

        update dl_bordercontrol.borderdocuments
        set optionaldata    = l_borderdocument_rec.optionaldata
           ,givenname_thai  = l_borderdocument_rec.givenname_thai
           ,middlename_thai = l_borderdocument_rec.middlename_thai
           ,surname_thai    = l_borderdocument_rec.surname_thai
           ,sub_nationality = l_borderdocument_rec.sub_nationality
           ,source_system   = l_borderdocument_rec.source_system
           ,calc_mrzdg1     = l_borderdocument_rec.calc_mrzdg1
        where brddocid = l_borderdocument_rec.brddocid;

        l_abis_insert := true;

    elsif l_borderdocument_rec.manual_expiry_date is not null
    then
        update dl_bordercontrol.borderdocuments
        set manual_expiry_date = l_borderdocument_rec.manual_expiry_date
        where brddocid = l_borderdocument_rec.brddocid;

    end if;

    -- check for duplicate movement insert
    select count(1)
      into l_movement_is_duplicate
      from movements
     where brddocid = l_borderdocument_rec.brddocid
       and date_of_entry = l_movement_rec.date_of_entry;

    if l_movement_is_duplicate = 0 then
      -- movement
      -- insert movement
      l_movement_rec.mvmntid := dl_bordercontrol.dl_movementhandling.create_movement(
         p_EXITFLG => l_movement_rec.exitflg
         ,p_INS_TERMINAL => l_terminal
         ,p_INS_BORDERPOST => l_borderpost
         --,p_INS_BY => l_ins_by
         ,p_SOURCE_SYSTEM => l_borderdocument_rec.source_system
         );

     --insert borderdocument id into movement as it is needed for the visa
     update dl_bordercontrol.movements
     set brddocid = l_borderdocument_rec.brddocid
        ,ins_by   = l_ins_by
     where mvmntid = l_movement_rec.mvmntid;

     dl_bordercontrol.dl_movementhandling.update_movement(
        l_movement_rec.mvmntid
        ,l_borderdocument_rec.docno
        ,l_borderdocument_rec.issuectry
        ,l_borderdocument_rec.expirydate
        ,l_movement_rec.exitflg
        ,l_movement_rec.max_stay_dt
        ,l_movement_rec.observation
        ,0
        ,0
        ,l_movement_rec.trnsprtunitid
        ,l_movement_rec.person_type
        ,l_movement_rec.visa_type
        ,null --! todo l_movement_rec.visa
        ,l_terminal
        ,l_borderpost
        ,l_movement_rec.date_of_entry
        ,l_visas_rec.visa_number
        ,l_visas_rec.expiry_date
        ,l_visas_rec.issuing_date
        ,l_visas_rec.issuing_place
        ,l_visas_rec.additional_info
        ,l_visas_rec.permit_type
        ,l_visas_rec.permit_expiry_date
        ,l_entry_forms_rec.form_no
        ,l_entry_forms_rec.province
        ,l_entry_forms_rec.district
        ,l_entry_forms_rec.subdistrict
        ,l_entry_forms_rec.address
        ,l_entry_forms_rec.note
        ,l_movement_rec.form_no_approved
        ,l_movement_rec.mrzvisa
        ,l_movement_blob_rec.live_photo
        ,l_movement_blob_rec.wsq_ll
        ,l_movement_blob_rec.wsq_lr
        ,l_movement_blob_rec.wsq_lm
        ,l_movement_blob_rec.wsq_li
        ,l_movement_blob_rec.wsq_lt
        ,l_movement_blob_rec.wsq_rl
        ,l_movement_blob_rec.wsq_rr
        ,l_movement_blob_rec.wsq_rm
        ,l_movement_blob_rec.wsq_ri
        ,l_movement_blob_rec.wsq_rt
        ,l_visas_rec.visa_image
        ,l_entry_forms_rec.form_image
        ,l_movement_rec.scanned_flight
        ,p_PS_3             => l_movement_rec.ps_3
        ,p_PS_4             => l_movement_rec.ps_4
        ,p_PS_5             => l_movement_rec.ps_5
        ,p_PS_6             => l_movement_rec.ps_6
        ,p_SOURCE_SYSTEM    => l_borderdocument_rec.source_system);

        -- insert images
        update dl_bordercontrol.movements_blob
        set live_photo  = l_movement_blob_rec.live_photo
           ,wsq_ll      = l_movement_blob_rec.wsq_ll
           ,wsq_lr      = l_movement_blob_rec.wsq_lr
           ,wsq_lm      = l_movement_blob_rec.wsq_lm
           ,wsq_li      = l_movement_blob_rec.wsq_li
           ,wsq_lt      = l_movement_blob_rec.wsq_lt
           ,wsq_rl      = l_movement_blob_rec.wsq_rl
           ,wsq_rr      = l_movement_blob_rec.wsq_rr
           ,wsq_rm      = l_movement_blob_rec.wsq_rm
           ,wsq_ri      = l_movement_blob_rec.wsq_ri
           ,wsq_rt      = l_movement_blob_rec.wsq_rt
        where mvmnt_id = l_movement_rec.mvmntid;

        -- incident (blacklist)
        if l_incidents_rec.type is not null then
            pkg_incidents.create_incident(
               p_type => 10,
               p_ins_terminal => l_terminal,
               p_ins_borderpost => l_borderpost,
               p_docno => l_borderdocument_rec.docno,
               p_issuingcountry => l_borderdocument_rec.issuectry,
               p_lastname => l_borderdocument_rec.surname,
               p_givenname => l_borderdocument_rec.givenname,
               p_gender => l_incidents_rec.gender,
               p_dob => l_borderdocument_rec.dob,
               p_brddocid => l_borderdocument_rec.brddocid,
               p_mvmntid => l_movement_rec.mvmntid,
               p_bl_status => ''A'',
               p_bl_number_of_hits => l_incidents_rec.bl_number_of_hits,
               p_bl_action => l_incidents_rec.bl_action,
               p_bl_remarks => l_incidents_rec.bl_remarks,
               p_supervisor => l_incidents_rec.supervisor,
               p_bl_approved_identity_score => l_incidents_rec.bl_approved_identity_score,
               p_officer => l_username,
               p_client_ip => l_ip,
               p_id => l_incidents_rec.id,
               p_allow_pass => ''Y'');
        end if;

        -- fellow passengers
        for idx in 1 .. l_fellow_passenger_cnt loop
           insert into dl_bordercontrol.person(first_name
                                              ,last_name
                                              ,date_of_birth
                                              ,sex
                                              ,image
                                              ,nationality)
           values(l_fellow_passengers(idx).first_name
                 ,l_fellow_passengers(idx).last_name
                 ,l_fellow_passengers(idx).date_of_birth
                 ,case
                      when l_fellow_passengers(idx).sex = 1 then ''MALE''
                      when l_fellow_passengers(idx).sex = 2 then ''FEMALE''
                      else ''UNKNOWN''
                  end
                 ,l_fellow_passengers(idx).image
                 ,l_fellow_passengers(idx).nationality)
           returning key_value into l_fellow_passenger_person;

           insert into dl_bordercontrol.fellow_passenger(person
                                                        ,relation
                                                        ,nationality
                                                        ,tm6_no
                                                        ,first_name
                                                        ,last_name
                                                        ,sex
                                                        ,date_of_birth
                                                        ,place_of_birth
                                                        ,image
                                                        ,mvmntid)
           values(l_fellow_passenger_person
                 ,l_fellow_passengers(idx).relation
                 ,l_fellow_passengers(idx).nationality
                 ,l_fellow_passengers(idx).tm6_no
                 ,l_fellow_passengers(idx).first_name
                 ,l_fellow_passengers(idx).last_name
                 ,case
                      when l_fellow_passengers(idx).sex = 1 then ''MALE''
                      when l_fellow_passengers(idx).sex = 2 then ''FEMALE''
                      else ''UNKNOWN''
                  end
                 ,l_fellow_passengers(idx).date_of_birth
                 ,l_fellow_passengers(idx).place_of_birth
                 ,l_fellow_passengers(idx).image
                 ,l_movement_rec.mvmntid);
        end loop;
    end if;

    exception when others then
        :status         := 500;
        :message        := dbms_utility.format_error_backtrace;
        :borderdocument := null;
        :movement       := null;
        :abis           := null;
        rollback;
        return;
    end;

    -- insert travel abis if needed
    if not l_abis_insert then
        select max(afisid)
          into l_abis
          from dl_bordercontrol.borderdocuments
         where brddocid = l_borderdocument_rec.brddocid;
        if l_abis is null then
            l_abis_insert := true;
        end if;
    end if;

    if l_abis_insert then
        if l_movement_rec.mvmntid is not null then
            l_abis := dl_bordercontrol.pkg_bmbs_apex_util.bmbs_insert_travel_abis_movement(l_movement_rec.mvmntid);
        else
            l_abis := dl_bordercontrol.pkg_bmbs_apex_util.bmbs_insert_travel_abis_document(l_borderdocument_rec.brddocid);
        end if;
    end if;

    -- return values
    :status         := 200;
    :message        := ''Everything has been inserted.'';
    :borderdocument := l_borderdocument_rec.brddocid;
    :movement       := l_movement_rec.mvmntid;
    :abis           := l_abis;

    exception when others then
        :status         := 500;
        :message        := dbms_utility.format_error_backtrace;
        :borderdocument := null;
        :movement       := null;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/dataSync',
      p_method             => 'POST',
      p_name               => 'message',
      p_bind_variable_name => 'message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/dataSync',
      p_method             => 'POST',
      p_name               => 'pkAbis',
      p_bind_variable_name => 'abis',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/dataSync',
      p_method             => 'POST',
      p_name               => 'pkBorderdocument',
      p_bind_variable_name => 'borderdocument',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/dataSync',
      p_method             => 'POST',
      p_name               => 'pkMovement',
      p_bind_variable_name => 'movement',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/dataSync',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/dataSyncError',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/dataSyncError',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => 'application/json',
      p_comments       => NULL,
      p_source         =>
'declare
    --
    l_values         apex_json.t_values;
    l_source_blob    blob := :body;
    l_source_clob    clob;
    --
    l_response          clob;
    l_response_message  varchar2(4000);
    --
    l_dstoff    integer := 1;
    l_srcoff    integer := 1;
    l_lngctx    integer := 0;
    l_warning   integer;
    --
    l_offline_sync_error_rec    dl_bordercontrol.offline_sync_error%ROWTYPE;
    --
begin

    -- convert json
    dbms_lob.createtemporary(l_source_clob, true);

    dbms_lob.converttoclob(dest_lob     => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''al32utf8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    apex_json.parse (p_values => l_values
                    ,p_source => l_source_clob);

    -- read json and fill records
    l_offline_sync_error_rec.payload        := apex_json.get_clob(p_values => l_values, p_path => ''payload'');
    l_offline_sync_error_rec.error_message  := apex_json.get_clob(p_values => l_values, p_path => ''error'');
    l_offline_sync_error_rec.url            := apex_json.get_varchar2(p_values => l_values, p_path => ''url'');

    insert into dl_bordercontrol.offline_sync_error(payload
                                                   ,error_message
                                                   ,url)
    values(l_offline_sync_error_rec.payload
          ,l_offline_sync_error_rec.error_message
          ,l_offline_sync_error_rec.url);
end;');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/downloadApp/{VERSION}',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/downloadApp/{VERSION}',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    l_active    number;
    l_version   dl_bordercontrol.offline_mode.file_version%type;
    l_blob      dl_bordercontrol.offline_mode.file_blob%type;
    l_name      dl_bordercontrol.offline_mode.file_name%type;
    l_mime_type dl_bordercontrol.offline_mode.file_mimetype%type;
begin
    -- get current active version
    select count(is_active)
    into l_active
    from dl_bordercontrol.offline_mode
    where is_active = ''Y''
      and file_version = :VERSION;

    -- check if client version is up to date
    if l_active >= 1 then
        :l_message := ''File is up to date.'';
    else
        -- get all file data of new version
        select file_blob
              ,file_mimetype
              ,file_name
              ,file_version
        into l_blob
            ,l_mime_type
            ,l_name
            ,l_version
        from dl_bordercontrol.offline_mode
        where is_active = ''Y''
        order by file_version desc
        fetch first 1 row only;

        -- prepare download
        owa_util.mime_header(l_mime_type, false);
        htp.p(''cache-control: no-cache'');
        htp.p(''content-length: '' || dbms_lob.getlength(l_blob));
        htp.p(''content-disposition: filename="'' || l_name || ''"'');
        htp.p(''x-file-version: '' || l_version);
        owa_util.http_header_close;

        -- update total downloads number
        update dl_bordercontrol.offline_mode
        set download_last = sysdate
           ,download_total = (select max(download_total) + 1 from dl_bordercontrol.offline_mode where is_active = ''Y'')
        where is_active = ''Y'';

        -- download file
        wpg_docload.download_file(l_blob);
    end if;

    -- exception handling
    exception when others then
        :l_message := sqlerrm;

end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/downloadApp/{VERSION}',
      p_method             => 'GET',
      p_name               => 'message',
      p_bind_variable_name => 'l_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/getBlacklist',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/getBlacklist',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    --
    l_count_this    number;
    l_count_total   number;
    --
    l_json_main json := json();
    l_json_identity_obj json;
    l_json_identity_arr json_list := json_list();
    l_json_passport_obj json;
    l_json_passport_arr json_list;
    l_json_blacklist_case_obj json;
    l_json_blacklist_case_arr json_list;
    --
    l_file_clob clob;
    l_file_blob blob;
    --
    v_lang_context  integer := dbms_lob.default_lang_ctx;
    v_warning       integer := dbms_lob.warn_inconvertible_char;
    v_dest_offset   integer := 1;
    v_source_offset integer := 1;
    --
begin
    -- set counter variables
    select count(*)
    into l_count_this
    from dl_blacklist.identities
    where (:last_modified is null or (to_timestamp_tz(dml_at) >= to_timestamp_tz(:last_modified, ''yyyy-mm-dd"T"hh24:mi:ssTZH:TZM'')))
    and rownum <= 1000;

    select count(*)
    into l_count_total
    from dl_blacklist.identities;

    -- loop through all identities, generate json and insert into json array
    for i in (select id.key_value
                    ,id.surname
                    ,id.middle_name
                    ,id.given_name
                    ,id.surname_thai
                    ,id.middlename_thai
                    ,id.givenname_thai
                    ,id.date_of_birth
                    ,id.nationality
                    ,id.sex
                    ,id.dml_at
                    ,id.is_active
          from dl_blacklist.identities id
          where (:last_modified is null or (to_timestamp_tz(dml_at) >= to_timestamp_tz(:last_modified, ''yyyy-mm-dd"T"hh24:mi:ssTZH:TZM'')))
          and rownum <= 1000)
    loop
        -- identities
        l_json_identity_obj := json();

        l_json_identity_obj.put(''key_value''         , i.key_value);
        l_json_identity_obj.put(''surname''           , i.surname);
        l_json_identity_obj.put(''middle_name''       , i.middle_name);
        l_json_identity_obj.put(''given_name''        , i.given_name);
        l_json_identity_obj.put(''surname_thai''      , i.surname_thai);
        l_json_identity_obj.put(''middlename_thai''   , i.middlename_thai);
        l_json_identity_obj.put(''givenname_thai''    , i.givenname_thai);
        l_json_identity_obj.put(''date_of_birth''     , to_char(i.date_of_birth, ''YYYY-MM-DD"T"hh24:mi:ss''));
        l_json_identity_obj.put(''nationality''       , i.nationality);
        l_json_identity_obj.put(''sex''               , i.sex);
        l_json_identity_obj.put(''dml_at''            , to_char(i.dml_at, ''YYYY-MM-DD"T"hh24:mi:ss''));
        l_json_identity_obj.put(''is_active''         , i.is_active);

        -- passports, loop, generate json and insert into json array
        l_json_passport_arr := json_list();

        for j in (select td.key_value
                        ,td.doc_type
                        ,td.issuing_country
                        ,td.issuing_authority
                        ,td.doc_number
                        ,td.date_of_issue
                        ,td.date_of_expiry
                        ,td.surname
                        ,td.middle_name
                        ,td.given_name
                        ,td.nationality
                        ,td.date_of_birth
                        ,td.place_of_birth
                        ,td.sex
                        ,td.hair_color
                        ,td.hair_characteristic
                    from dl_blacklist.travel_docs td
                    where td.identity = i.key_value)
        loop
            l_json_passport_obj := json();

            l_json_passport_obj.put(''key_value''             , j.key_value);
            l_json_passport_obj.put(''doc_type''              , j.doc_type);
            l_json_passport_obj.put(''issuing_country''       , j.issuing_country);
            l_json_passport_obj.put(''issuing_authority''     , j.issuing_authority);
            l_json_passport_obj.put(''doc_number''            , j.doc_number);
            l_json_passport_obj.put(''date_of_issue''         , to_char(j.date_of_issue, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_passport_obj.put(''date_of_expiry''        , to_char(j.date_of_expiry, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_passport_obj.put(''surname''               , j.surname);
            l_json_passport_obj.put(''middle_name''           , j.middle_name);
            l_json_passport_obj.put(''given_name''            , j.given_name);
            l_json_passport_obj.put(''nationality''           , j.nationality);
            l_json_passport_obj.put(''date_of_birth''         , to_char(j.date_of_birth, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_passport_obj.put(''place_of_birth''        , j.place_of_birth);
            l_json_passport_obj.put(''sex''                   , j.sex);
            l_json_passport_obj.put(''hair_color''            , j.hair_color);
            l_json_passport_obj.put(''hair_characteristic''   , j.hair_characteristic);

            l_json_passport_arr.append(l_json_passport_obj.to_json_value());
        end loop;

        -- insert passports
        l_json_identity_obj.put(''passports'' , l_json_passport_arr);

        -- blacklist cases, loop, generate json and insert into json array
        l_json_blacklist_case_arr := json_list();

        for h in (select bc.id
                        ,bc.authority
                        ,bc.behavior
                        ,bc.case_number
                        ,bc.secret_level
                        ,bc.reason
                        ,bc.urgent_contact
                        ,bc.contact_information
                        ,bc.target_code
                        ,bc.action_code
                        ,bc.notice
                        ,bc.reference_document
                        ,bc.warrant_arrested_type
                        ,bc.criminal_case_number
                        ,bc.arrested_description
                        ,bc.arrested_status
                        ,bc.decided_case_number
                        ,bc.arrested_warrant_expiry_date
                        ,bc.related_document
                        ,bc.arrested_warrant_number
                        ,bc.arrested_warrant_date
                        ,bc.travel_permit
                        ,bc.travel_permit_from
                        ,bc.travel_permit_to
                        ,bc.travel_permit_date_insert
                        ,bc.travel_permit_date_delete
                        ,bc.travel_permit_note
                        ,bc.owner_data
                        ,bc.other_description
                        ,bc.contact_telephone_number
                        ,bc.contact_owner_data
                        ,bc.associated_behavior
                        ,bc.other
                        ,bc.case_type
                        ,bc.ostay_creation_date
                        ,bc.ostay_self_indictment
                        ,bc.ostay_status
                        ,bc.ostay_no_days
                        ,bc.ostay_arrival_date
                        ,bc.ostay_departure_date
                        ,bc.ostay_tm6
                        ,bc.ostay_block_period
                        ,bc.ostay_notice
                        ,bc.lost_pp_lost_date
                        ,bc.lost_pp_last_place
                        ,bc.lost_pp_notify_date
                        ,bc.lost_pp_notify_place
                        ,bc.lost_pp_visa_on_arriv
                        ,bc.lost_pp_visa_exp_date
                        ,bc.lost_pp_notice
                        ,bc.lost_pp_new_pp_type
                        ,bc.lost_pp_new_pp_number
                        ,bc.lost_pp_new_pp_issue_date
                        ,bc.lost_pp_new_pp_place_of_issue
                        ,bc.lost_pp_new_pp_expire_date
                        ,bc.arrested_warrant_year
                        ,bc.undecided_case_number
                        ,bc.is_active
        from dl_blacklist.blacklist_cases bc
        join dl_blacklist.blacklist_case_identities ci on ci.blacklist_case = bc.id
        where ci.identity = i.key_value)
        loop
            l_json_blacklist_case_obj := json();

            l_json_blacklist_case_obj.put(''id''                              , h.id);
            l_json_blacklist_case_obj.put(''authority''                       , h.authority);
            l_json_blacklist_case_obj.put(''behavior''                        , h.behavior);
            l_json_blacklist_case_obj.put(''case_number''                     , h.case_number);
            l_json_blacklist_case_obj.put(''secret_level''                    , h.secret_level);
            l_json_blacklist_case_obj.put(''reason''                          , h.reason);
            l_json_blacklist_case_obj.put(''urgent_contact''                  , h.urgent_contact);
            l_json_blacklist_case_obj.put(''contact_information''             , h.contact_information);
            l_json_blacklist_case_obj.put(''target_code''                     , h.target_code);
            l_json_blacklist_case_obj.put(''action_code''                     , h.action_code);
            l_json_blacklist_case_obj.put(''notice''                          , h.notice);
            l_json_blacklist_case_obj.put(''reference_document''              , h.reference_document);
            l_json_blacklist_case_obj.put(''warrant_arrested_type''           , h.warrant_arrested_type);
            l_json_blacklist_case_obj.put(''criminal_case_number''            , h.criminal_case_number);
            l_json_blacklist_case_obj.put(''arrested_description''            , h.arrested_description);
            l_json_blacklist_case_obj.put(''arrested_status''                 , h.arrested_status);
            l_json_blacklist_case_obj.put(''decided_case_number''             , h.decided_case_number);
            l_json_blacklist_case_obj.put(''arrested_warrant_expiry_date''    , to_char(h.arrested_warrant_expiry_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''related_document''                , h.related_document);
            l_json_blacklist_case_obj.put(''arrested_warrant_number''         , h.arrested_warrant_number);
            l_json_blacklist_case_obj.put(''arrested_warrant_date''           , to_char(h.arrested_warrant_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''travel_permit''                   , h.travel_permit);
            l_json_blacklist_case_obj.put(''travel_permit_from''              , to_char(h.travel_permit_from, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''travel_permit_to''                , to_char(h.travel_permit_to, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''travel_permit_date_insert''       , to_char(h.travel_permit_date_insert, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''travel_permit_date_delete''       , to_char(h.travel_permit_date_delete, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''travel_permit_note''              , h.travel_permit_note);
            l_json_blacklist_case_obj.put(''owner_data''                      , h.owner_data);
            l_json_blacklist_case_obj.put(''other_description''               , h.other_description);
            l_json_blacklist_case_obj.put(''contact_telephone_number''        , h.contact_telephone_number);
            l_json_blacklist_case_obj.put(''contact_owner_data''              , h.contact_owner_data);
            l_json_blacklist_case_obj.put(''associated_behavior''             , h.associated_behavior);
            l_json_blacklist_case_obj.put(''other''                           , h.other);
            l_json_blacklist_case_obj.put(''case_type''                       , h.case_type);
            l_json_blacklist_case_obj.put(''ostay_creation_date''             , to_char(h.ostay_creation_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''ostay_self_indictment''           , h.ostay_self_indictment);
            l_json_blacklist_case_obj.put(''ostay_status''                    , h.ostay_status);
            l_json_blacklist_case_obj.put(''ostay_no_days''                   , h.ostay_no_days);
            l_json_blacklist_case_obj.put(''ostay_arrival_date''              , to_char(h.ostay_arrival_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''ostay_departure_date''            , to_char(h.ostay_departure_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''ostay_tm6''                       , h.ostay_tm6);
            l_json_blacklist_case_obj.put(''ostay_block_period''              , h.ostay_block_period);
            l_json_blacklist_case_obj.put(''ostay_notice''                    , h.ostay_notice);
            l_json_blacklist_case_obj.put(''lost_pp_lost_date''               , to_char(h.lost_pp_lost_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''lost_pp_last_place''              , h.lost_pp_last_place);
            l_json_blacklist_case_obj.put(''lost_pp_notify_date''             , to_char(h.lost_pp_notify_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''lost_pp_notify_place''            , h.lost_pp_notify_place);
            l_json_blacklist_case_obj.put(''lost_pp_visa_on_arriv''           , h.lost_pp_visa_on_arriv);
            l_json_blacklist_case_obj.put(''lost_pp_visa_exp_date''           , to_char(h.lost_pp_visa_exp_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''lost_pp_notice''                  , h.lost_pp_notice);
            l_json_blacklist_case_obj.put(''lost_pp_new_pp_type''             , h.lost_pp_new_pp_type);
            l_json_blacklist_case_obj.put(''lost_pp_new_pp_number''           , h.lost_pp_new_pp_number);
            l_json_blacklist_case_obj.put(''lost_pp_new_pp_issue_date''       , to_char(h.lost_pp_new_pp_issue_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''lost_pp_new_pp_place_of_issue''   , h.lost_pp_new_pp_place_of_issue);
            l_json_blacklist_case_obj.put(''lost_pp_new_pp_expire_date''      , to_char(h.lost_pp_new_pp_expire_date, ''YYYY-MM-DD"T"hh24:mi:ss''));
            l_json_blacklist_case_obj.put(''arrested_warrant_year''           , h.arrested_warrant_year);
            l_json_blacklist_case_obj.put(''undecided_case_number''           , h.undecided_case_number);
            l_json_blacklist_case_obj.put(''is_active''                       , h.is_active);

            l_json_blacklist_case_arr.append(l_json_blacklist_case_obj.to_json_value());
        end loop;

        -- insert blacklist cases
        l_json_identity_obj.put(''cases'' , l_json_blacklist_case_arr);

        -- append identity into identities array
        l_json_identity_arr.append(l_json_identity_obj.to_json_value());
    end loop;

    -- insert identities into main json
    l_json_main.put(''this_count'' , l_count_this);
    l_json_main.put(''total_count'', l_count_total);
    l_json_main.put(''elements''   , l_json_identity_arr);

    -- json to clob file
    dbms_lob.createtemporary(l_file_clob, true);
    l_json_main.to_clob(l_file_clob);

    -- convert clob to blob
    dbms_lob.createtemporary(l_file_blob, true, dbms_lob.call);
    dbms_lob.converttoblob (
        dest_lob    => l_file_blob,
        src_clob    => l_file_clob,
        amount      => dbms_lob.lobmaxsize,
        dest_offset => v_dest_offset,
        src_offset  => v_source_offset,
        blob_csid   => dbms_lob.default_csid,
        lang_context=> v_lang_context,
        warning     => v_warning
    );

    -- prepare download
    owa_util.mime_header( ''application/octet-stream'', false,''utf-8'' );
    htp.p(''content-length: '' || sys.dbms_lob.getlength( l_file_clob ));
    htp.p(''content-disposition: attachment; filename="offline_blacklist.json"'' );
    owa_util.http_header_close;

    -- download file and free blob
    wpg_docload.download_file(l_file_blob);
    dbms_lob.freetemporary (l_file_blob);
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'offline/getBlacklist',
      p_method             => 'GET',
      p_name               => 'lastModified',
      p_bind_variable_name => 'last_modified',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/getUsers',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'offline/getUsers',
      p_method         => 'GET',
      p_source_type    => 'json/query',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'select us.username
      ,us.first_name
      ,us.last_name
      ,us.mail_address
      ,sg.offline_pin
from dl_user_management.users us
join dl_user_management.users$sgd sg on us.id = sg.id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/blacklist/actions',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/blacklist/actions',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.action_codes
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.action_codes$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
            from dl_common.action_codes a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/blacklist/actions',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/blacklist/actions',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/blacklist/reasons',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/blacklist/reasons',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.reason_codes
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.reason_codes$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
            from dl_common.reason_codes a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/blacklist/reasons',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/blacklist/reasons',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/blacklist/secretLevels',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/blacklist/secretLevels',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.secret_levels
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.secret_levels$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
            from dl_common.secret_levels a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/blacklist/secretLevels',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/blacklist/secretLevels',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/borderposts',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/borderposts',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select bp.key_value   as value,
               bp.border_type as bordertype,
               cursor(
                   select *
                   from(   select ''en_US'' as locale, name as display_value
                           from dl_bordercontrol.borderposts
                           where key_value = bp.key_value
                           union all
                           select ''th_TH'' as locale, name as display_value
                           from dl_bordercontrol.borderposts
                           where key_value = bp.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_bordercontrol.borderposts bp
        where is_active = ''Y'';

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/borderposts',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/borderposts',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/countries',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/countries',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               cursor(
                   select visa_type
                   from dl_common.country$visa_type vt
                   where vt.country = a.key_value
               ) as visaTypes,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.icao_doc_codes
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.icao_doc_codes$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.icao_doc_codes a
        where is_active = ''Y'';

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/countries',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/countries',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/countriesVisaTypes',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/countriesVisaTypes',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select icao_doc_code as country,
               visa_type     as visaType
        from dl_common.icao_doc_code$visa_type a
        where is_default = ''Y'';

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/countriesVisaTypes',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/countriesVisaTypes',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/directions',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/directions',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select num_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.port_movements
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.port_movements$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.port_movements a
        where is_active = ''Y'';

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/directions',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/directions',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/districts',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/districts',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               adm_class_province as parent,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_bordercontrol.adm_class_district
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_bordercontrol.adm_class_district$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_bordercontrol.adm_class_district a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/districts',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/districts',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/docClasses',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/docClasses',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select num_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.bc_doc_class
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.bc_doc_class$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.bc_doc_class a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/docClasses',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/docClasses',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/genders',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/genders',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select num_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.human_sexes
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.human_sexes$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.human_sexes a
        where is_active = ''Y'' and num_value is not null
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/genders',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/genders',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/permitTypes',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/permitTypes',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.permit_types
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.permit_types$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.permit_types a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/permitTypes',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/permitTypes',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/provinces',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/provinces',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select display_code as value,
               key_value    as key_value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_bordercontrol.adm_class_province
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_bordercontrol.adm_class_province$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_bordercontrol.adm_class_province a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/provinces',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/provinces',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/relations',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/relations',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select rl.key_value as value,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.relations
                           where key_value = rl.key_value
                           union all
                           select locale, display_value
                           from dl_common.relations$i18n
                           where key_value = rl.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.relations rl
        where rl.is_active = ''Y''
        order by rl.display_code;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/relations',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/relations',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/subdistricts',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/subdistricts',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value as value,
               adm_class_district as parent,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_bordercontrol.adm_class_subdistrict
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_bordercontrol.adm_class_subdistrict$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_bordercontrol.adm_class_subdistrict a
        where is_active = ''Y''
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/subdistricts',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/subdistricts',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/terminals',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/terminals',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select tm.id          as value,
               tm.border_post as parent,
               cursor(
                   select *
                   from(   select ''en_US'' as locale, name as display_value
                           from dl_bordercontrol.terminals
                           where id = tm.id
                           union all
                           select ''th_TH'' as locale, name as display_value
                           from dl_bordercontrol.terminals
                           where id = tm.id
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_bordercontrol.terminals tm;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/terminals',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/terminals',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/vehicles',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/vehicles',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select tv.num_value   as value,
               tv.key_value   as key_value,
               tm.border_type as bordertype,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.trans_vehicles
                           where key_value = tv.key_value
                           union all
                           select locale, display_value
                           from dl_common.trans_vehicles$i18n
                           where key_value = tv.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.trans_vehicles tv
        left join dl_common.trans_modes tm on tm.key_value = tv.trans_mode
        where tv.is_active = ''Y''
        order by tv.display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/vehicles',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/vehicles',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/visaTypes',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'BmBS',
      p_pattern        => 'selectList/visaTypes',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page => 25,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'declare
    c1 sys_refcursor;
begin
    open c1 for
        select key_value   as value,
               permit_days as days,
               cursor(
                   select *
                   from(   select locale, display_value
                           from dl_common.visa_types
                           where key_value = a.key_value
                           union all
                           select locale, display_value
                           from dl_common.visa_types$i18n
                           where key_value = a.key_value
                           )
                   pivot (
                      max(display_value)
                      for locale
                      in (''en_US'' as en_US,''th_TH'' as th_TH)
                   )
               ) as locales
        from dl_common.visa_types a
        where is_active = ''Y'' and permit_days is not null
        order by display_order;

    :status := 200;
    :result := c1;
end;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/visaTypes',
      p_method             => 'GET',
      p_name               => 'options',
      p_bind_variable_name => 'result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'RESULTSET',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'BmBS',
      p_pattern            => 'selectList/visaTypes',
      p_method             => 'GET',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);



COMMIT;

END;


/
timing for: TIMER_REST_EXPORT
Elapsed: 00:00:00.29
