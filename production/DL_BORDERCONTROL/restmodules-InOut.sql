
-- Generated by ORDS REST Data Services 18.4.0.r3541002
-- Schema: DL_BORDERCONTROL Date: removed for diff
--

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'DL_BORDERCONTROL',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'dl_bordercontrol',
      p_auto_rest_auth      => FALSE);

  ORDS.DEFINE_MODULE(
      p_module_name    => 'InOut',
      p_base_path      => '/inout/',
      p_items_per_page => 25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'InOut',
      p_pattern        => 'borderdocument',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'InOut',
      p_pattern        => 'borderdocument',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE

    l_values         APEX_JSON.T_VALUES;
    l_source_blob    BLOB := :body;
    l_source_clob    CLOB;
    --
    l_response       CLOB;
    l_response_message    VARCHAR2(4000 CHAR);
    l_status         INTEGER := 400;
    --
    l_borderdocument_rec    dl_bordercontrol.borderdocuments%ROWTYPE;
    l_identity              dl_bordercontrol.identities.identity%TYPE;
    --
    l_photo_scan    blob;
    l_photo_chip    blob;
    l_photo_pass    blob;
    --
    l_dstoff         INTEGER := 1;
    l_srcoff         INTEGER := 1;
    l_lngctx         INTEGER := 0;
    l_warning        INTEGER;

BEGIN

    DBMS_LOB.CREATETEMPORARY(l_source_clob, TRUE);

    DBMS_LOB.CONVERTTOCLOB(dest_lob     => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''AL32UTF8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    APEX_JSON.PARSE (P_VALUES => l_values
                    ,P_SOURCE => l_source_clob);

    -- fill borderdocument-object (maybe also use get_borderdocument functionality?)
    l_borderdocument_rec.doctype              := apex_json.get_varchar2(p_values => l_values, p_path => ''documentType'');
    l_borderdocument_rec.docno                := apex_json.get_varchar2(p_values => l_values, p_path => ''passportNumber'');
    l_borderdocument_rec.issuectry            := apex_json.get_varchar2(p_values => l_values, p_path => ''issuingCountry'');
    l_borderdocument_rec.nat                  := apex_json.get_varchar2(p_values => l_values, p_path => ''nationality'');
    l_borderdocument_rec.dob                  := apex_json.get_varchar2(p_values => l_values, p_path => ''dateOfBirth'');
    l_borderdocument_rec.expirydate           := apex_json.get_date(p_values => l_values, p_path => ''expiryDate'');
    l_borderdocument_rec.givenname            := apex_json.get_varchar2(p_values => l_values, p_path => ''givenname'');
    l_borderdocument_rec.surname              := apex_json.get_varchar2(p_values => l_values, p_path => ''surname'');
    l_borderdocument_rec.middlename           := apex_json.get_varchar2(p_values => l_values, p_path => ''middlename'');
    l_borderdocument_rec.optionaldata         := apex_json.get_varchar2(p_values => l_values, p_path => ''optionalData'');
    l_borderdocument_rec.afisid               := apex_json.get_varchar2(p_values => l_values, p_path => ''abisId'');
    l_borderdocument_rec.ins_terminal         := apex_json.get_varchar2(p_values => l_values, p_path => ''terminal'');
    l_borderdocument_rec.ins_borderpost       := apex_json.get_varchar2(p_values => l_values, p_path => ''borderpost'');
    l_borderdocument_rec.mrzdg1               := apex_json.get_varchar2(p_values => l_values, p_path => ''mrz'');
    l_borderdocument_rec.givenname_thai       := apex_json.get_varchar2(p_values => l_values, p_path => ''givennameThai'');
    l_borderdocument_rec.middlename_thai      := apex_json.get_varchar2(p_values => l_values, p_path => ''middlenameThai'');
    l_borderdocument_rec.surname_thai         := apex_json.get_varchar2(p_values => l_values, p_path => ''surnameThai'');
    l_borderdocument_rec.manual_expiry_date   := apex_json.get_date(p_values => l_values, p_path => ''manualExpiryDate'');
    l_borderdocument_rec.manual_issuing_date  := apex_json.get_date(p_values => l_values, p_path => ''manualIssuingDate'');
    l_borderdocument_rec.manual_nationality   := apex_json.get_varchar2(p_values => l_values, p_path => ''manualNationality'');
    l_borderdocument_rec.manual_placeofbirth  := apex_json.get_varchar2(p_values => l_values, p_path => ''manualPlaceOfBirth'');
    l_borderdocument_rec.sex                  := apex_json.get_varchar2(p_values => l_values, p_path => ''gender'');
    l_borderdocument_rec.docclass             := apex_json.get_varchar2(p_values => l_values, p_path => ''documentClass'');
    l_borderdocument_rec.sub_nationality      := apex_json.get_varchar2(p_values => l_values, p_path => ''subNationalities'');
  --  l_borderdocument_rec.source_system        := apex_json.get_number(p_values => l_values, p_path => ''sourceSystem'');
    l_photo_scan                              := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''photoScan''));
    l_photo_chip                              := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''photoChip''));
    l_photo_pass                              := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''photoPass''));

    -- check if mandatory fields exist
    IF l_borderdocument_rec.doctype         IS NULL OR
       l_borderdocument_rec.docno           IS NULL OR
       l_borderdocument_rec.issuectry       IS NULL OR
       l_borderdocument_rec.nat             IS NULL OR
       l_borderdocument_rec.dob             IS NULL OR
       l_borderdocument_rec.expirydate      IS NULL OR
       l_borderdocument_rec.surname         IS NULL OR
       l_borderdocument_rec.ins_terminal    IS NULL OR
       l_borderdocument_rec.ins_borderpost  IS NULL OR
       l_borderdocument_rec.sex             IS NULL
    THEN

      l_status := 405;
      l_response_message := '''';

      CASE WHEN l_borderdocument_rec.doctype        IS NULL THEN l_response_message := l_response_message || ''; documentType must not be empty'';    ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.docno          IS NULL THEN l_response_message := l_response_message || ''; passportNumber must not be empty'';  ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.issuectry      IS NULL THEN l_response_message := l_response_message || ''; issuingCountry must not be empty'';  ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.nat            IS NULL THEN l_response_message := l_response_message || ''; nationality must not be empty'';     ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.dob            IS NULL THEN l_response_message := l_response_message || ''; dateOfBirth must not be empty'';     ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.expirydate     IS NULL THEN l_response_message := l_response_message || ''; expiryDate must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.surname        IS NULL THEN l_response_message := l_response_message || ''; surname must not be empty'';         ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.ins_terminal   IS NULL THEN l_response_message := l_response_message || ''; terminal must not be empty'';        ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.ins_borderpost IS NULL THEN l_response_message := l_response_message || ''; borderpost must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_borderdocument_rec.sex            IS NULL THEN l_response_message := l_response_message || ''; gender must not be empty'';          ELSE NULL; END CASE;

    ELSE

        -- check if borderdocument already exists
        l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.get_document (p_docno      => l_borderdocument_rec.docno
                                                                                           ,p_issuectry  => l_borderdocument_rec.issuectry
                                                                                           ,p_expirydate => l_borderdocument_rec.expirydate);

        IF l_borderdocument_rec.brddocid IS NULL
        THEN
            l_borderdocument_rec.brddocid := dl_bordercontrol.pkg_borderdocuments.create_document(l_borderdocument_rec.docno
                                                                                                 ,l_borderdocument_rec.doctype
                                                                                                 ,l_borderdocument_rec.issuectry
                                                                                                 ,l_borderdocument_rec.expirydate
                                                                                                 ,l_borderdocument_rec.surname
                                                                                                 ,l_borderdocument_rec.middlename
                                                                                                 ,l_borderdocument_rec.givenname
                                                                                                 ,l_borderdocument_rec.sex
                                                                                                 ,l_borderdocument_rec.dob
                                                                                                 ,l_borderdocument_rec.mrzdg1
                                                                                                 ,l_borderdocument_rec.ins_terminal
                                                                                                 ,l_borderdocument_rec.ins_borderpost
                                                                                                 ,l_photo_scan
                                                                                                 ,l_photo_chip
                                                                                                 ,l_photo_pass
                                                                                                 ,null
                                                                                                 ,null
                                                                                                 ,null
                                                                                                 ,null
                                                                                                 ,l_borderdocument_rec.manual_expiry_date
                                                                                                 ,l_borderdocument_rec.manual_issuing_date
                                                                                                 ,l_borderdocument_rec.manual_nationality
                                                                                                 ,l_borderdocument_rec.manual_placeofbirth
                                                                                                 ,l_borderdocument_rec.docclass
                                                                                                 ,l_identity);


            update dl_bordercontrol.borderdocuments
            set nat             = l_borderdocument_rec.nat
               ,optionaldata    = l_borderdocument_rec.optionaldata
               ,afisid          = l_borderdocument_rec.afisid
               ,givenname_thai  = l_borderdocument_rec.givenname_thai
               ,middlename_thai = l_borderdocument_rec.middlename_thai
               ,surname_thai    = l_borderdocument_rec.surname_thai
               ,sub_nationality = l_borderdocument_rec.sub_nationality
              -- ,source_system   = l_borderdocument_rec.source_system
            where brddocid = l_borderdocument_rec.brddocid;

        END IF;
    END IF;

    IF l_borderdocument_rec.brddocid IS NOT NULL
    THEN
      l_status := 201;
      l_response_message := ''The borderdocument was successfully created.'';
    END IF;

    :response_status_code := l_status;
    :response_status_message := l_response_message;
    :response_pk := l_borderdocument_rec.brddocid;

    :response := l_response;
    :status := l_status;

EXCEPTION
    WHEN OTHERS
    THEN
        :response_status_code    := l_status;
        :response_status_message := SQLERRM;
        --
        :status := l_status;
        :response := l_response;
END;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'responsePk',
      p_bind_variable_name => 'response_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'responseStatusCode',
      p_bind_variable_name => 'response_status_code',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'borderdocument',
      p_method             => 'POST',
      p_name               => 'responseStatusMessage',
      p_bind_variable_name => 'response_status_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'InOut',
      p_pattern        => 'movement',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'InOut',
      p_pattern        => 'movement',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         =>
'DECLARE

    l_values         APEX_JSON.T_VALUES;
    l_source_blob    BLOB := :body;
    l_source_clob    CLOB;
    --
    l_response       CLOB;
    l_response_message    VARCHAR2(4000 CHAR);
    l_status         INTEGER := 400;
    --
    l_movement_rec      dl_bordercontrol.movements%ROWTYPE;
    l_movement_blob_rec dl_bordercontrol.movements_blob%ROWTYPE;
    l_entry_forms_rec   dl_bordercontrol.entry_forms%ROWTYPE;
    --
    l_dstoff         INTEGER := 1;
    l_srcoff         INTEGER := 1;
    l_lngctx         INTEGER := 0;
    l_warning        INTEGER;

BEGIN

    DBMS_LOB.CREATETEMPORARY(l_source_clob, TRUE);

    DBMS_LOB.CONVERTTOCLOB(dest_lob     => l_source_clob
                          ,src_blob     => l_source_blob
                          ,amount       => dbms_lob.lobmaxsize
                          ,dest_offset  => l_dstoff
                          ,src_offset   => l_srcoff
                          ,blob_csid    => nls_charset_id(''AL32UTF8'')
                          ,lang_context => l_lngctx
                          ,warning      => l_warning);

    APEX_JSON.PARSE (P_VALUES => l_values
                    ,P_SOURCE => l_source_clob);

    -- fill borderdocument-object (maybe also use get_borderdocument functionality?)
    l_movement_rec.brddocid         := apex_json.get_varchar2(p_values => l_values, p_path => ''borderdocumentId'');
    l_movement_rec.exitflg          := apex_json.get_varchar2(p_values => l_values, p_path => ''exitFlag'');
    l_movement_rec.max_stay_dt      := apex_json.get_date(p_values => l_values, p_path => ''maxStayDate'');
    l_movement_rec.ins_terminal     := apex_json.get_varchar2(p_values => l_values, p_path => ''terminal'');
    l_movement_rec.ins_borderpost   := apex_json.get_varchar2(p_values => l_values, p_path => ''borderpost'');
    l_movement_rec.trnsprtunitid    := apex_json.get_varchar2(p_values => l_values, p_path => ''transportUnit'');
    l_movement_rec.person_type      := apex_json.get_varchar2(p_values => l_values, p_path => ''personType'');
    l_movement_rec.scanned_flight   := apex_json.get_varchar2(p_values => l_values, p_path => ''scannedFlight'');
    l_movement_rec.visa_type        := apex_json.get_varchar2(p_values => l_values, p_path => ''visaType'');
    l_movement_rec.visa             := apex_json.get_varchar2(p_values => l_values, p_path => ''visaId'');
    l_movement_rec.is_finished      := apex_json.get_varchar2(p_values => l_values, p_path => ''isFinished'');
    l_movement_rec.prior_movement   := apex_json.get_varchar2(p_values => l_values, p_path => ''priorMovementId'');
    l_movement_rec.movement_dt      := apex_json.get_date(p_values => l_values, p_path => ''movementDate'');
    l_movement_rec.date_of_entry    := apex_json.get_date(p_values => l_values, p_path => ''dateOfEntry'');
    l_movement_rec.mrzvisa          := apex_json.get_varchar2(p_values => l_values, p_path => ''mrzVisa'');
    -- Movement Images
    l_movement_blob_rec.live_photo  := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''livePhoto''));
    l_movement_blob_rec.wsq_ll := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLL''));
    l_movement_blob_rec.wsq_li := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLI''));
    l_movement_blob_rec.wsq_lm := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLM''));
    l_movement_blob_rec.wsq_lr := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLR''));
    l_movement_blob_rec.wsq_lt := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerLT''));
    l_movement_blob_rec.wsq_rl := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRL''));
    l_movement_blob_rec.wsq_ri := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRI''));
    l_movement_blob_rec.wsq_rm := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRM''));
    l_movement_blob_rec.wsq_rr := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRR''));
    l_movement_blob_rec.wsq_rt := dl_common.pkg_util.decode_base64(apex_json.get_clob(p_values => l_values, p_path => ''fingerRT''));
    -- Entry Form
    l_entry_forms_rec.form_no        := apex_json.get_varchar2(p_values => l_values, p_path => ''formNo'');
    l_entry_forms_rec.province       := apex_json.get_varchar2(p_values => l_values, p_path => ''province'');
    l_entry_forms_rec.district       := apex_json.get_varchar2(p_values => l_values, p_path => ''district'');
    l_entry_forms_rec.subdistrict    := apex_json.get_varchar2(p_values => l_values, p_path => ''subdistrict'');
    l_entry_forms_rec.address        := apex_json.get_varchar2(p_values => l_values, p_path => ''address'');
    l_entry_forms_rec.note           := apex_json.get_varchar2(p_values => l_values, p_path => ''note'');

    l_movement_rec.source_system  := 4;

    -- check if mandatory fields exist
    IF l_movement_rec.exitflg         IS NULL OR
       l_movement_rec.ins_terminal    IS NULL OR
       l_movement_rec.ins_borderpost  IS NULL OR
       l_movement_rec.is_finished     IS NULL OR
       l_movement_rec.movement_dt     IS NULL OR
       l_movement_rec.source_system   IS NULL
    THEN

      l_status := 405;
      l_response_message := '''';

      CASE WHEN l_movement_rec.exitflg        IS NULL THEN l_response_message := l_response_message || ''; exitFlag must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.ins_terminal   IS NULL THEN l_response_message := l_response_message || ''; terminal must not be empty'';      ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.ins_borderpost IS NULL THEN l_response_message := l_response_message || ''; borderpost must not be empty'';    ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.is_finished    IS NULL THEN l_response_message := l_response_message || ''; isFinished must not be empty'';    ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.movement_dt    IS NULL THEN l_response_message := l_response_message || ''; movementDate must not be empty'';  ELSE NULL; END CASE;
      CASE WHEN l_movement_rec.source_system  IS NULL THEN l_response_message := l_response_message || ''; sourceSystem must not be empty'';  ELSE NULL; END CASE;

    ELSE

        INSERT INTO dl_bordercontrol.movements(brddocid
                                              ,exitflg
                                              ,max_stay_dt
                                              ,ins_terminal
                                              ,ins_borderpost
                                              ,trnsprtunitid
                                              ,person_type
                                              ,scanned_flight
                                              ,visa_type
                                              ,visa
                                              ,is_finished
                                              ,prior_movement
                                              ,movement_dt
                                              ,date_of_entry
                                              ,mrzvisa
                                              ,source_system)
        VALUES (l_movement_rec.brddocid
               ,l_movement_rec.exitflg
               ,l_movement_rec.max_stay_dt
               ,l_movement_rec.ins_terminal
               ,l_movement_rec.ins_borderpost
               ,l_movement_rec.trnsprtunitid
               ,l_movement_rec.person_type
               ,l_movement_rec.scanned_flight
               ,l_movement_rec.visa_type
               ,l_movement_rec.visa
               ,l_movement_rec.is_finished
               ,l_movement_rec.prior_movement
               ,l_movement_rec.movement_dt
               ,l_movement_rec.date_of_entry
               ,l_movement_rec.mrzvisa
               ,l_movement_rec.source_system)
        RETURNING mvmntid INTO l_movement_rec.mvmntid;

        -- insert movement_blobs if they are not null
        if l_movement_blob_rec.live_photo is not null or
           l_movement_blob_rec.wsq_ll is not null or
           l_movement_blob_rec.wsq_li is not null or
           l_movement_blob_rec.wsq_lm is not null or
           l_movement_blob_rec.wsq_lr is not null or
           l_movement_blob_rec.wsq_lt is not null or
           l_movement_blob_rec.wsq_rl is not null or
           l_movement_blob_rec.wsq_ri is not null or
           l_movement_blob_rec.wsq_rm is not null or
           l_movement_blob_rec.wsq_rr is not null or
           l_movement_blob_rec.wsq_rt is not null
        then
            insert into dl_bordercontrol.movements_blob (mvmnt_id
                                                        ,live_photo
                                                        ,wsq_ll
                                                        ,wsq_li
                                                        ,wsq_lm
                                                        ,wsq_lr
                                                        ,wsq_lt
                                                        ,wsq_rl
                                                        ,wsq_ri
                                                        ,wsq_rm
                                                        ,wsq_rr
                                                        ,wsq_rt
                                                        ,ins_terminal
                                                        ,ins_borderpost)

            values (l_movement_rec.mvmntid
                   ,l_movement_blob_rec.live_photo
                   ,l_movement_blob_rec.wsq_ll
                   ,l_movement_blob_rec.wsq_li
                   ,l_movement_blob_rec.wsq_lm
                   ,l_movement_blob_rec.wsq_lr
                   ,l_movement_blob_rec.wsq_lt
                   ,l_movement_blob_rec.wsq_rl
                   ,l_movement_blob_rec.wsq_ri
                   ,l_movement_blob_rec.wsq_rm
                   ,l_movement_blob_rec.wsq_rr
                   ,l_movement_blob_rec.wsq_rt
                   ,l_movement_rec.ins_terminal
                   ,l_movement_rec.ins_borderpost);
        end if;

        -- insert entry_form
        if l_entry_forms_rec.form_no is not null
        then
            insert into dl_bordercontrol.entry_forms (form_no
                                                     ,province
                                                     ,district
                                                     ,subdistrict
                                                     ,address
                                                     ,note
                                                     ,ins_terminal
                                                     ,ins_borderpost)
            values (l_entry_forms_rec.form_no
                   ,l_entry_forms_rec.province
                   ,l_entry_forms_rec.district
                   ,l_entry_forms_rec.subdistrict
                   ,l_entry_forms_rec.address
                   ,l_entry_forms_rec.note
                   ,l_movement_rec.ins_terminal
                   ,l_movement_rec.ins_borderpost)
            returning key_value into l_movement_rec.entry_form;

            -- insert entry_form id into movements
            update dl_bordercontrol.movements set entry_form = l_movement_rec.entry_form
            where mvmntid = l_movement_rec.mvmntid;

        end if;
    END IF;

    IF l_movement_rec.mvmntid IS NOT NULL
    THEN
      l_status := 201;
      l_response_message := ''The movement was successfully created.'';
    END IF;

    :response_status_code := l_status;
    :response_status_message := l_response_message;
    :response_pk := l_movement_rec.mvmntid;

    :response := l_response;
    :status := l_status;

EXCEPTION
    WHEN OTHERS
    THEN
        :response_status_code    := l_status;
        :response_status_message := SQLERRM;
        --
        :status := l_status;
        :response := l_response;
END;');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'X-APEX-STATUS-CODE',
      p_bind_variable_name => 'status',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'responsePk',
      p_bind_variable_name => 'response_pk',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'responseStatusCode',
      p_bind_variable_name => 'response_status_code',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => NULL);

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'InOut',
      p_pattern            => 'movement',
      p_method             => 'POST',
      p_name               => 'responseStatusMessage',
      p_bind_variable_name => 'response_status_message',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => NULL);



COMMIT;

END;


/
timing for: TIMER_REST_EXPORT
Elapsed: 00:00:00.04
